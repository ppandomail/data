row.names(df) # solicitamos los nombres de las filas.
attributes(df)
iris[1,1] # extraemos el dato de la fila 1 y columna 1
iris[1, ] # extraemos todos los datos de la fila 1
iris[,1] # extraemos todos los datos de la columna 1
iris[1] # también, de esta manera, se puede extraer la columna 1
# o indicando el nombre de la columna a extrae utilizando el símbolo "$". En este caso se extrae en forma de vector
iris$Sepal.Length
# otra manera de extraer la primera columna como un vector
iris[[1]]
iris
m <- matrix(1:6, nrow = 2, ncol = 3)
m # visualizamos la matriz
dim(m) # verificamos las dimensiones de la matriz
arreglo <- array(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,
13,14, 15, 16, 17, 18), dim=c(3, 3, 2))
lista <- list(Numeros = 1:5, Cadena = c("Hola", "Hola"),
Matriz = matrix(1:6, nrow = 2, ncol = 3))
df <- data.frame(Fruta = c("manzana", "pera",
"banana", "ciruela"),
Cantidad = 1:4)
nrow(df)  # observamos el número de filas.
ncol(df)  # observamos el número de columnas.
colnames(df) # solicitamos los nombres de las columnas.
row.names(df) # solicitamos los nombres de las filas.
attributes(df)
iris[1,1] # extraemos el dato de la fila 1 y columna 1
iris[1, ] # extraemos todos los datos de la fila 1
iris[,1] # extraemos todos los datos de la columna 1
iris[1] # también, de esta manera, se puede extraer la columna 1
# o indicando el nombre de la columna a extrae utilizando el símbolo "$". En este caso se extrae en forma de vector
iris$Sepal.Length
# otra manera de extraer la primera columna como un vector
iris[[1]]
iris_setosa <- subset(iris, Species=="setosa")
iris_setosa
m <- matrix(1:6, nrow = 2, ncol = 3)
m # visualizamos la matriz
dim(m) # verificamos las dimensiones de la matriz
arreglo <- array(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,
13,14, 15, 16, 17, 18), dim=c(3, 3, 2))
lista <- list(Numeros = 1:5, Cadena = c("Hola", "Hola"),
Matriz = matrix(1:6, nrow = 2, ncol = 3))
df <- data.frame(Fruta = c("manzana", "pera",
"banana", "ciruela"),
Cantidad = 1:4)
nrow(df)  # observamos el número de filas.
ncol(df)  # observamos el número de columnas.
colnames(df) # solicitamos los nombres de las columnas.
row.names(df) # solicitamos los nombres de las filas.
attributes(df)
iris[1,1] # extraemos el dato de la fila 1 y columna 1
iris[1, ] # extraemos todos los datos de la fila 1
iris[,1] # extraemos todos los datos de la columna 1
iris[1] # también, de esta manera, se puede extraer la columna 1
# o indicando el nombre de la columna a extrae utilizando el símbolo "$". En este caso se extrae en forma de vector
iris$Sepal.Length
# otra manera de extraer la primera columna como un vector
iris[[1]]
iris_setosa <- subset(iris, Species=="setosa")
# Filtramos a la variedad Species reteniendo solo las categorías “setosa” y “virginica”
iris_set.virginica <- subset(iris, Species in c("setosa", "virginica"))
m <- matrix(1:6, nrow = 2, ncol = 3)
m # visualizamos la matriz
dim(m) # verificamos las dimensiones de la matriz
arreglo <- array(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,
13,14, 15, 16, 17, 18), dim=c(3, 3, 2))
lista <- list(Numeros = 1:5, Cadena = c("Hola", "Hola"),
Matriz = matrix(1:6, nrow = 2, ncol = 3))
df <- data.frame(Fruta = c("manzana", "pera",
"banana", "ciruela"),
Cantidad = 1:4)
nrow(df)  # observamos el número de filas.
ncol(df)  # observamos el número de columnas.
colnames(df) # solicitamos los nombres de las columnas.
row.names(df) # solicitamos los nombres de las filas.
attributes(df)
iris[1,1] # extraemos el dato de la fila 1 y columna 1
iris[1, ] # extraemos todos los datos de la fila 1
iris[,1] # extraemos todos los datos de la columna 1
iris[1] # también, de esta manera, se puede extraer la columna 1
# o indicando el nombre de la columna a extrae utilizando el símbolo "$". En este caso se extrae en forma de vector
iris$Sepal.Length
# otra manera de extraer la primera columna como un vector
iris[[1]]
iris_setosa <- subset(iris, Species=="setosa")
# Filtramos a la variedad Species reteniendo solo las categorías “setosa” y “virginica”
iris_set.virginica <- subset(iris, Species in c("setosa", "virginica"))
df <- data.frame("Sexo" = c("hombre", "mujer", "hombre", "hombre", "mujer", "mujer", "hombre", "mujer"),
"Presión arterial" = c(119, 99, 102, 78, 78, 82, 96, 104),
"Pulsos por minuto" = c(59, 89, 107, 76, 91, 64, 78, 92))
df
datos <- data.frame("Sexo" = c("hombre", "mujer", "hombre", "hombre", "mujer", "mujer", "hombre", "mujer"),
"Presión arterial" = c(119, 99, 102, 78, 78, 82, 96, 104),
"Pulsos por minuto" = c(59, 89, 107, 76, 91, 64, 78, 92))
datos[c(1,4)]
datos <- data.frame("Sexo" = c("hombre", "mujer", "hombre", "hombre", "mujer", "mujer", "hombre", "mujer"),
"Presión arterial" = c(119, 99, 102, 78, 78, 82, 96, 104),
"Pulsos por minuto" = c(59, 89, 107, 76, 91, 64, 78, 92))
datos[c(1,4),]
datos <- data.frame("Sexo" = c("hombre", "mujer", "hombre", "hombre", "mujer", "mujer", "hombre", "mujer"),
"Presión arterial" = c(119, 99, 102, 78, 78, 82, 96, 104),
"Pulsos por minuto" = c(59, 89, 107, 76, 91, 64, 78, 92))
datos[c(1,4),]
datos[c(1,4),c(2,3)]
subset(datos, Sexo=='mujer')
subset(datos, Sexo=='mujer')[1]
datos <- data.frame("Sexo" = c("hombre", "mujer", "hombre", "hombre", "mujer", "mujer", "hombre", "mujer"),
"Presión arterial" = c(119, 99, 102, 78, 78, 82, 96, 104),
"Pulsos por minuto" = c(59, 89, 107, 76, 91, 64, 78, 92))
datos[c(1,4),]
datos[c(1,4),c(2,3)]
subset(datos, Sexo=='mujer')[1]
subset(datos, Sexo=='mujer')[1,]
subset(datos, Sexo=='mujer')[1,2] > subset(datos, Sexo=='mujer')[2,2]
datos[,3]
datos[,3] * 60
datos <- data.frame("Sexo" = c("hombre", "mujer", "hombre", "hombre", "mujer", "mujer", "hombre", "mujer"),
"Presión arterial" = c(119, 99, 102, 78, 78, 82, 96, 104),
"Pulsos por minuto" = c(59, 89, 107, 76, 91, 64, 78, 92))
datos[c(1,4),]
datos[c(1,4),c(2,3)]
subset(datos, Sexo=='mujer')[1,2] > subset(datos, Sexo=='mujer')[2,2]
datos[,3] * 60
datos
hombres_mayor100 <- subset(datos, Sexo=='hombre', "Presión arterial" > 100)
hombres_mayor100
datos <- data.frame("Sexo" = c("hombre", "mujer", "hombre", "hombre", "mujer", "mujer", "hombre", "mujer"),
"Presión_arterial" = c(119, 99, 102, 78, 78, 82, 96, 104),
"Pulsos_por_minuto" = c(59, 89, 107, 76, 91, 64, 78, 92))
datos[c(1,4),]
datos[c(1,4),c(2,3)]
subset(datos, Sexo=='mujer')[1,2] > subset(datos, Sexo=='mujer')[2,2]
datos[,3] * 60
datos
hombres_mayor100 <- subset(datos, Sexo=='hombre', "Presión_arterial" > 100)
hombres_mayor100
datos <- data.frame("Sexo" = c("hombre", "mujer", "hombre", "hombre", "mujer", "mujer", "hombre", "mujer"),
"Presión_arterial" = c(119, 99, 102, 78, 78, 82, 96, 104),
"Pulsos_por_minuto" = c(59, 89, 107, 76, 91, 64, 78, 92))
datos[c(1,4),]
datos[c(1,4),c(2,3)]
subset(datos, Sexo=='mujer')[1,2] > subset(datos, Sexo=='mujer')[2,2]
datos[,3] * 60
datos
hombres_mayor100 <- subset(datos, Sexo=='hombre' & "Presión_arterial" > 100)
hombres_mayor100
datos <- data.frame( Sexo = c("hombre", "mujer", "hombre", "hombre", "mujer", "mujer", "hombre", "mujer"),
Presión_arterial = c(119, 99, 102, 78, 78, 82, 96, 104),
Pulsos_por_minuto = c(59, 89, 107, 76, 91, 64, 78, 92))
datos[c(1,4),]
datos[c(1,4),c(2,3)]
subset(datos, Sexo=='mujer')[1,2] > subset(datos, Sexo=='mujer')[2,2]
datos[,3] * 60
datos
hombres_mayor100 <- subset(datos, Sexo=='hombre' & Presión_arterial > 100)
hombres_mayor100
datos <- data.frame( Sexo = c("hombre", "mujer", "hombre", "hombre", "mujer", "mujer", "hombre", "mujer"),
Presión_arterial = c(119, 99, 102, 78, 78, 82, 96, 104),
Pulsos_por_minuto = c(59, 89, 107, 76, 91, 64, 78, 92))
datos[c(1,4),]
datos[c(1,4),c(2,3)]
subset(datos, Sexo=='mujer')[1,2] > subset(datos, Sexo=='mujer')[2,2]
datos[,3] * 60
datos
hombres_mayor100 <- subset(datos, Sexo=='hombre' & Presión_arterial > 100)
hombres_mayor100
datos
max <- max(subset(datos, Sexo=='mujer')[3])
datos <- data.frame( Sexo = c("hombre", "mujer", "hombre", "hombre", "mujer", "mujer", "hombre", "mujer"),
Presión_arterial = c(119, 99, 102, 78, 78, 82, 96, 104),
Pulsos_por_minuto = c(59, 89, 107, 76, 91, 64, 78, 92))
datos[c(1,4),]
datos[c(1,4),c(2,3)]
subset(datos, Sexo=='mujer')[1,2] > subset(datos, Sexo=='mujer')[2,2]
datos[,3] * 60
datos
hombres_mayor100 <- subset(datos, Sexo=='hombre' & Presión_arterial > 100)
hombres_mayor100
datos
max <- max(subset(datos, Sexo=='mujer')[3])
max
# Crear un dataframe con las siguientes variables
datos <- data.frame( Sexo = c("hombre", "mujer", "hombre", "hombre", "mujer", "mujer", "hombre", "mujer"),
Presión_arterial = c(119, 99, 102, 78, 78, 82, 96, 104),
Pulsos_por_minuto = c(59, 89, 107, 76, 91, 64, 78, 92))
# Visualizar todos los valores para el primer y cuarto individuo
datos[c(1,4),]
# Repetir lo mismo pero solo para las últimas dos variables
datos[c(1,4),c(2,3)]
# Determinar si la primera mujer de la tabla tiene una presión arterial mayor a la de la segunda mujer
subset(datos, Sexo=='mujer')[1,2] > subset(datos, Sexo=='mujer')[2,2]
# Construir una nueva columna que cuente los pulsos pero por hora
datos <- mutate(datos, Pulsos_por_hora = c(datos[,3] * 60))
# Crear un dataframe con las siguientes variables
datos <- data.frame( Sexo = c("hombre", "mujer", "hombre", "hombre", "mujer", "mujer", "hombre", "mujer"),
Presión_arterial = c(119, 99, 102, 78, 78, 82, 96, 104),
Pulsos_por_minuto = c(59, 89, 107, 76, 91, 64, 78, 92))
# Visualizar todos los valores para el primer y cuarto individuo
datos[c(1,4),]
# Repetir lo mismo pero solo para las últimas dos variables
datos[c(1,4),c(2,3)]
# Determinar si la primera mujer de la tabla tiene una presión arterial mayor a la de la segunda mujer
subset(datos, Sexo=='mujer')[1,2] > subset(datos, Sexo=='mujer')[2,2]
# Construir una nueva columna que cuente los pulsos pero por hora
datos <- cbind(datos, Pulsos_por_hora = c(datos[,3] * 60))
datos
setwd("/Users/ppando/Materias/data/materias/exploracion-visualizacion/bd")
bd_csv <- "usuarios_ecobici_2024.csv"
df <- read.table(bd_csv, sep = ",", header = TRUE)
head(df)
setwd("/Users/ppando/Materias/data/materias/exploracion-visualizacion/bd")
bd_csv <- "usuarios_ecobici_2024.csv"
df <- read.table(bd_csv, sep = ",", header = TRUE)
head(df)
# Leer los nombres de las columnas de la base
nombre_columnas <- names(df)
setwd("/Users/ppando/Materias/data/materias/exploracion-visualizacion/bd")
bd_csv <- "usuarios_ecobici_2024.csv"
df <- read.table(bd_csv, sep = ",", header = TRUE)
head(df)
# Leer los nombres de las columnas de la base
nombre_columnas <- names(df)
nombre_columnas
setwd("/Users/ppando/Materias/data/materias/exploracion-visualizacion/bd")
bd_csv <- "usuarios_ecobici_2024.csv"
df <- read.table(bd_csv, sep = ",", header = TRUE)
head(df)
# Leer los nombres de las columnas de la base
nombre_columnas <- names(df)
nombre_columnas
# ¿Cuántos años tiene la mujer de mayor edad?
df_females <- subset(df, genero_usuario=='FEMALE')
mujer_mayor_edad <- max(df$edad_usuario)
mujer_mayor_edad
View(df)
setwd("/Users/ppando/Materias/data/materias/exploracion-visualizacion/bd")
bd_csv <- "usuarios_ecobici_2024.csv"
df <- read.table(bd_csv, sep = ",", header = TRUE)
head(df)
# Leer los nombres de las columnas de la base
nombre_columnas <- names(df)
nombre_columnas
# ¿Cuántos años tiene la mujer de mayor edad?
df_females <- subset(df, genero_usuario=='FEMALE')
mujer_mayor_edad <- max(df_females$edad_usuario)
mujer_mayor_edad
# ¿Cuál es la edad más frecuente de los hombres?
df_male <- subset(df, genero_usuario=='MALE')
frecuencias <- table(df_male$edad_usuario)
edad_mas_frecuente
setwd("/Users/ppando/Materias/data/materias/exploracion-visualizacion/bd")
bd_csv <- "usuarios_ecobici_2024.csv"
df <- read.table(bd_csv, sep = ",", header = TRUE)
head(df)
# Leer los nombres de las columnas de la base
nombre_columnas <- names(df)
nombre_columnas
# ¿Cuántos años tiene la mujer de mayor edad?
df_females <- subset(df, genero_usuario=='FEMALE')
mujer_mayor_edad <- max(df_females$edad_usuario)
mujer_mayor_edad
# ¿Cuál es la edad más frecuente de los hombres?
df_male <- subset(df, genero_usuario=='MALE')
frecuencias <- table(df_male$edad_usuario)
edad_mas_frecuente <- as.numeric(names(frecuencias)[which.max(frecuencias)])
edad_mas_frecuente
install.packages("ggplot2")
library(ggplot2)
ggplot(hombres, aes(x = edad_usuario)) +
geom_bar(stat = "count", fill = "blue") +
labs(title = "Frecuencia de Edad de Hombres en Ecobici",
x = "Edad",
y = "Frecuencia") +
theme_minimal()
library(ggplot2)
ggplot(df_male, aes(x = edad_usuario)) +
geom_bar(stat = "count", fill = "blue") +
labs(title = "Frecuencia de Edad de Hombres en Ecobici",
x = "Edad",
y = "Frecuencia") +
theme_minimal()
df_male <- subset(df, genero_usuario=='MALE' && edad_usuario < 100)
df_male <- subset(df, genero_usuario=='MALE' & edad_usuario < 100)
frecuencias <- table(df_male$edad_usuario)
edad_mas_frecuente <- as.numeric(names(frecuencias)[which.max(frecuencias)])
edad_mas_frecuente
library(ggplot2)
ggplot(df_male, aes(x = edad_usuario)) +
geom_bar(stat = "count", fill = "blue") +
labs(title = "Frecuencia de Edad de Hombres en Ecobici",
x = "Edad",
y = "Frecuencia") +
theme_minimal()
df_female_mas_40 <- subset(df, genero_usuario=='FEMALE' & edad_usuario < 40)
View(df_female_mas_40)
# Segmentar la base con las mujeres que tienen una edad mayor a 40 y guardarla en un archivo .csv
df_female_mas_40 <- subset(df, genero_usuario=='FEMALE' & edad_usuario > 40)
write.csv2(x = df_female_mas_40, file = "df_female_mas_40.csv")
f <- factor(df$genero_usuario)
f
f <- factor(c(df$genero_usuario))
f
f <- factor(c(df$genero_usuario))
table(x)               # tabla de frecuencias
unclass(x)             # vector sin las etiquetas
genero_unicas <- unique(df$genero_usuario)
genero_unicas
f <- factor(c(df$genero_usuario))
f
df_fem = subset(df, genero_usuario=='FEMALE')
df_mal = subset(df, genero_usuario=='MALE')
write.xlsx(x = df_fem, file = "prueba.xlsx", rowNames = FALSE, sheet= 'female')
library(openxlsx)
df_fem = subset(df, genero_usuario=='FEMALE')
df_mal = subset(df, genero_usuario=='MALE')
write.xlsx(x = df_fem, file = "prueba.xlsx", rowNames = FALSE, sheet= 'female')
library(openxlsx)
df_fem = subset(df, genero_usuario=='FEMALE')
df_mal = subset(df, genero_usuario=='MALE')
write.xlsx(x = df_fem, file = "prueba.xlsx", rowNames = FALSE, sheet= 'female')
library(openxlsx)
df_fem = subset(df, genero_usuario=='FEMALE')
df_mal = subset(df, genero_usuario=='MALE')
write.xlsx(x = df_fem, file = "prueba.xlsx", rowNames = FALSE, sheetName = 'female')
write.xlsx(x = df_mal, file = "prueba.xlsx", rowNames = FALSE, sheetName = 'male')
library(openxlsx)
df_fem = subset(df, genero_usuario=='FEMALE')
df_mal = subset(df, genero_usuario=='MALE')
write.xlsx(x = df_fem, file = "prueba.xlsx", rowNames = FALSE, sheetName = 'female', append = TRUE)
write.xlsx(x = df_mal, file = "prueba.xlsx", rowNames = FALSE, sheetName = 'male', append = TRUE)
library(openxlsx)
df_fem = subset(df, genero_usuario=='FEMALE')
df_mal = subset(df, genero_usuario=='MALE')
write.xlsx(x = df_fem, file = "prueba.xlsx", rowNames = FALSE, sheetName = 'female')
write.xlsx(x = df_mal, file = "prueba.xlsx", rowNames = FALSE, sheetName = 'male', append = TRUE)
df_fem = subset(df, genero_usuario=='FEMALE')
df_mal = subset(df, genero_usuario=='MALE')
df_other = subset(df, genero_usuario=='OTHER')
lista_exportar <- list("df_mal" = df, "df_fem" = df, "df_other" = df)
write.xlsx(x = lista_exportar, file = "base_dividida.xlsx", rowNames = FALSE)
library(openxlsx)
df_fem = subset(df, genero_usuario=='FEMALE')
df_mal = subset(df, genero_usuario=='MALE')
df_other = subset(df, genero_usuario=='OTHER')
lista_exportar <- list("df_mal" = df, "df_fem" = df, "df_other" = df)
write.xlsx(x = lista_exportar, file = "base_dividida.xlsx", rowNames = FALSE)
library(openxlsx)
df_fem = subset(df, genero_usuario=='FEMALE')
df_mal = subset(df, genero_usuario=='MALE')
df_other = subset(df, genero_usuario=='OTHER')
lista_exportar <- list("df_mal" = df_mal, "df_fem" = df_fem, "df_other" = df_other)
write.xlsx(x = lista_exportar, file = "base_dividida.xlsx", rowNames = FALSE)
f = as.factor(df$genero_usuario)
f
levels(f)
View(df)
source("~/Materias/data/materias/exploracion-visualizacion/R/ecobicis.R")
gapminder <- gapminder::gapminder
View(gapminder)
cant_paises %>% select(count(gapminder$country)) %>% group_by(gapminder$country)
# 1. ¿Cuántos países hay en la base?
paises = unique(gapminder$country)
cant_paises %>% select(count(gapminder$country)) %>% group_by(gapminder$country)
library(dplyr)
library(dplyr)
cant_paises %>% select(count(gapminder$country)) %>% group_by(gapminder$country)
paises %>% select(count(gapminder$country)) %>% group_by(gapminder$country)
paises %>% select(count(paises$country)) %>% group_by(paises$country)
paises %>% group_by(paises$country) %>% select(count(paises$country)) %>%
paises %>% group_by(paises$country) %>% select(count(paises$country))
paises %>% group_by(paises) %>% select(count(paises))
# 1. ¿Cuántos países hay en la base?
paises = unique(gapminder$country)
paises
length(paises)
gapminder %>% group_by(continent) %>% select(count(country))
gapminder %>% group_by(continent) %>% select(country)
gapminder %>% select(country) %>% group_by(continent)
gapminder %>% select(country, continent) %>% group_by(continent)
pxc <- gapminder %>% group_by(continent) %>% summarise(num_paises = n_distinct(country))
pxc
p = gapminder %>% summarise(num_paises = n_distinct(country))
p
gapminder %>% summarise(max_expectativa = max.col(lifeExp))
gapminder %>% summarise(max_expectativa = max(lifeExp))
gapminder %>% summarise(max_expectativa = max(lifeExp)) %>% select(country, year)
gapminder %>% select(country, year, lifeExp)  %>% summarise(max_expectativa = max(lifeExp))
mejor_exp <- gapminder %>% filter(lifeExp == max(lifeExp)) %>% select(country, year, lifeExp)
mejor_exp
x <- gapminder %>% group_by(continent, year)
x
x <- gapminder %>% group_by(continent, year) %>% summarise(mas_pobre = min(gdpPercap), max = max(gdpPercap))
x
x <- gapminder %>% group_by(continent, year) %>% summarise(mas_pobre = min(gdpPercap), mas_rico = max(gdpPercap))
x
gapminder <- gapminder %>% group_by(continent, year) %>% summarise(mas_pobre = min(gdpPercap), mas_rico = max(gdpPercap))
gapminder
gapminder <- gapminder %>% group_by(continent, year) %>% summarise(mas_pobre = country[min(gdpPercap)], mas_rico = country[max(gdpPercap)])
gapminder <- gapminder %>% group_by(continent, year) %>% summarise(mas_pobre = country[min(gdpPercap)], mas_rico = country[max(gdpPercap)])
paises_extremos <- gapminder %>%
group_by(continent, year) %>%
summarise(
pais_mas_rico = country[which.max(gdpPercap)],
gdp_mas_rico = max(gdpPercap, na.rm = TRUE),
pais_mas_pobre = country[which.min(gdpPercap)],
gdp_mas_pobre = min(gdpPercap, na.rm = TRUE),
.groups = 'drop'   )
paises_extremos
max_precio_pesos = max(price_pesos))
paises_extremos <- gapminder %>%
group_by(continent, year) %>%
summarise(
pais_mas_rico = country[which.max(gdpPercap)],
gdp_mas_rico = max(gdpPercap, na.rm = TRUE),
pais_mas_pobre = country[which.min(gdpPercap)],
gdp_mas_pobre = min(gdpPercap, na.rm = TRUE),
.groups = 'drop'   )
pib_extremos <- gapminder %>% group_by(continent, year) %>%
# Pobre
slice_min(gdpPercap, n = 1, with_ties = FALSE) %>%
mutate(tipo = "más pobre") %>%
bind_rows(
gapminder %>%
group_by(continent, year) %>%
slice_max(gdpPercap, n = 1, with_ties = FALSE) %>%
mutate(tipo = "más rico")
) %>%
arrange(continent, year, tipo)
library(gapminder)
pib_extremos <- gapminder %>% group_by(continent, year) %>%
# Pobre
slice_min(gdpPercap, n = 1, with_ties = FALSE) %>%
mutate(tipo = "más pobre") %>%
bind_rows(
gapminder %>%
group_by(continent, year) %>%
slice_max(gdpPercap, n = 1, with_ties = FALSE) %>%
mutate(tipo = "más rico")
) %>%
arrange(continent, year, tipo)
library(gapminder)
library(gapminder)
library(gapminder)
gapminder <- gapminder::gapminder
paises_extremos <- gapminder %>%
group_by(continent, year) %>%
summarise(
pais_mas_rico = country[which.max(gdpPercap)],
gdp_mas_rico = max(gdpPercap, na.rm = TRUE),
pais_mas_pobre = country[which.min(gdpPercap)],
gdp_mas_pobre = min(gdpPercap, na.rm = TRUE),
.groups = 'drop')
paises_extremos
View(paises_extremos)
exp_1952 <- gapminder %>% filter(year == 1952) %>% group_by(continent) %>% summarise(prom = mean(lifeExp))
exp_1952
exp_1952 <- gapminder %>% filter(year == 1952 | year == 2007) %>% group_by(continent) %>% summarise(prom = mean(lifeExp))
exp_1952
exp <- gapminder %>% filter(year == 1952 | year == 2007)
exp
expectativa <- gapminder %>%
filter(year %in% c(1952, 2007)) %>%  # Filtrar solo los años 1952 y 2007
group_by(continent, year) %>%  # Agrupar por continente y año
summarise(expectativa_promedio = mean(lifeExp, na.rm = TRUE), .groups = 'drop')
tabla_wide <- expectativa %>%
pivot_wider(names_from = year, values_from = expectativa_promedio, names_prefix = "expectativa_")
tabla_wide
library(tidyr)
library(tidyr)
library(tidyr)
library(tidyr)
library(tidyr)
library(tidyr)
library(tidyr)
library(tidyr)
library(gapminder)
gapminder <- gapminder::gapminder
library(tidyr)
library(gapminder)
expectativa <- gapminder %>%
filter(year %in% c(1952, 2007)) %>%  # Filtrar solo los años 1952 y 2007
group_by(continent, year) %>%  # Agrupar por continente y año
summarise(expectativa_promedio = mean(lifeExp, na.rm = TRUE), .groups = 'drop')
tabla_wide <- expectativa %>%
pivot_wider(names_from = year, values_from = expectativa_promedio, names_prefix = "expectativa_")
tabla_wide
gapminder %>% filter(continent == 'America')
america <- gapminder %>% filter(continent == 'America')
america
america
america
View(america)
america <- gapminder %>% filter(continent == 'Americas')
america
america <- gapminder %>% filter(continent == 'Americas')
x <- america %>% group_by(country) %>% summarise(pp = country[which.mean(pop)])
america <- gapminder %>% filter(continent == 'Americas')
promedio_poblacion <- america %>% group_by(year) %>% summarise(promedio_poblacion = mean(pop))
promedio_poblacion
america <- gapminder %>% filter(continent == 'Americas')
promedio_poblacion <- america %>% group_by(year) %>% summarise(promedio_poblacion = mean(pop))
tabla_wide <- promedio_poblacion %>% pivot_wider(names_from = year, values_from = promedio_poblacion)
tabla_wide
america <- gapminder %>% filter(continent == 'Americas')
promedio_poblacion <- america %>% group_by(country, year) %>% summarise(promedio_poblacion = mean(pop))
tabla_wide <- promedio_poblacion %>% pivot_wider(names_from = year, values_from = promedio_poblacion)
tabla_wide
america <- gapminder %>% filter(continent == 'Americas')
promedio_poblacion <- america %>% group_by(year) %>% summarise(promedio_poblacion = mean(pop))
tabla_wide <- promedio_poblacion %>% pivot_wider(names_from = year, values_from = promedio_poblacion)
tabla_wide
