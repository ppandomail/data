y <- y[-1]
# Eliminar la última posición del vector y.
y <- y[-length(y)]
# Sumar todos los valores de “y” menos el último.
y
acum <- 0
i <- 1
while (i < length(y)) {
acum <- acum + y[i]
i <- i + 1
}
acum
# Agregarle un Na al vector “x” en las posiciones 8 y 9.
x[8] = x[9] = NA
x
# Construir un vector del 1 al 10 y guardarlo en una variable “x”
x <- 1:10
# Construir un vector del 1 al 20, cada dos unidades y guardarlo en una variable “y”.
y <- seq(1, 20, 2)
# Sumar “x” con “y”.
z <- x + y
# Restarle al vector “y” las primeras dos posiciones del vector “x”.
y = y - x[c(1,2)]
# Agregarle al vector “x” los valores de “y” que sean mayores a 5 y guardarlo en una nueva variable.
for (e in y)
if (e > 5)
z <- append(x, e)
# Eliminar la primera posición del vector y.
y <- y[-1]
# Eliminar la última posición del vector y.
y <- y[-length(y)]
# Sumar todos los valores de “y” menos el último.
acum <- 0
i <- 1
while (i < length(y)) {
acum <- acum + y[i]
i <- i + 1
}
acum
# Agregarle un Na al vector “x” en las posiciones 8 y 9.
x[8] <- x[9] <- NA
x
m <- matrix(nrow = 2, ncol = 3)
m # visualizamos la matriz
dim(m) # verificamos las dimensiones de la matriz
m <- matrix(nrow = 2, ncol = 3)
m # visualizamos la matriz
dim(m) # verificamos las dimensiones de la matriz
m <- matrix(1:6, nrow = 2, ncol = 3)
m # visualizamos la matriz
dim(m) # verificamos las dimensiones de la matriz
lista <- list(Numeros = 1:5, Cadena = c("Hola", "Hola"),
Matriz = matrix(1:6, nrow = 2, ncol = 3))
lista
lista
lista <- list(Numeros = 1:5, Cadena = c("Hola", "Hola"),
Matriz = matrix(1:6, nrow = 2, ncol = 3))
m <- matrix(1:6, nrow = 2, ncol = 3)
m # visualizamos la matriz
dim(m) # verificamos las dimensiones de la matriz
arreglo <- array(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,
13,14, 15, 16, 17, 18), dim=c(3, 3, 2))
lista <- list(Numeros = 1:5, Cadena = c("Hola", "Hola"),
Matriz = matrix(1:6, nrow = 2, ncol = 3))
lista
df <- data.frame(Fruta = c("manzana", "pera",
"banana", "ciruela"),
Cantidad = 1:4)
df
df <- data.frame(Fruta = c("manzana", "pera",
"banana", "ciruela"),
Cantidad = 1:3)
df <- data.frame(Fruta = c("manzana", "pera",
"banana", "ciruela"),
Cantidad = 1:4)
df
m <- matrix(1:6, nrow = 2, ncol = 3)
m # visualizamos la matriz
dim(m) # verificamos las dimensiones de la matriz
arreglo <- array(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,
13,14, 15, 16, 17, 18), dim=c(3, 3, 2))
lista <- list(Numeros = 1:5, Cadena = c("Hola", "Hola"),
Matriz = matrix(1:6, nrow = 2, ncol = 3))
df <- data.frame(Fruta = c("manzana", "pera",
"banana", "ciruela"),
Cantidad = 1:4)
lista <- list(df, df)
lista
View(df)
View(lista)
View(df)
m <- matrix(1:6, nrow = 2, ncol = 3)
m # visualizamos la matriz
dim(m) # verificamos las dimensiones de la matriz
arreglo <- array(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,
13,14, 15, 16, 17, 18), dim=c(3, 3, 2))
lista <- list(Numeros = 1:5, Cadena = c("Hola", "Hola"),
Matriz = matrix(1:6, nrow = 2, ncol = 3))
df <- data.frame(Fruta = c("manzana", "pera",
"banana", "ciruela"),
Cantidad = 1:4)
nrow(df)  # observamos el número de filas.
ncol(df)  # observamos el número de columnas.
colnames(df) # solicitamos los nombres de las columnas.
row.names(df) # solicitamos los nombres de las filas.
attributes(df)
m <- matrix(1:6, nrow = 2, ncol = 3)
m # visualizamos la matriz
dim(m) # verificamos las dimensiones de la matriz
arreglo <- array(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,
13,14, 15, 16, 17, 18), dim=c(3, 3, 2))
lista <- list(Numeros = 1:5, Cadena = c("Hola", "Hola"),
Matriz = matrix(1:6, nrow = 2, ncol = 3))
df <- data.frame(Fruta = c("manzana", "pera",
"banana", "ciruela"),
Cantidad = 1:4)
nrow(df)  # observamos el número de filas.
ncol(df)  # observamos el número de columnas.
colnames(df) # solicitamos los nombres de las columnas.
row.names(df) # solicitamos los nombres de las filas.
attributes(df)
methods(df)
m <- matrix(1:6, nrow = 2, ncol = 3)
m # visualizamos la matriz
dim(m) # verificamos las dimensiones de la matriz
arreglo <- array(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,
13,14, 15, 16, 17, 18), dim=c(3, 3, 2))
lista <- list(Numeros = 1:5, Cadena = c("Hola", "Hola"),
Matriz = matrix(1:6, nrow = 2, ncol = 3))
df <- data.frame(Fruta = c("manzana", "pera",
"banana", "ciruela"),
Cantidad = 1:4)
nrow(df)  # observamos el número de filas.
ncol(df)  # observamos el número de columnas.
colnames(df) # solicitamos los nombres de las columnas.
row.names(df) # solicitamos los nombres de las filas.
attributes(df)
functions(df)
iris
view(iris)
m <- matrix(1:6, nrow = 2, ncol = 3)
m # visualizamos la matriz
dim(m) # verificamos las dimensiones de la matriz
arreglo <- array(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,
13,14, 15, 16, 17, 18), dim=c(3, 3, 2))
lista <- list(Numeros = 1:5, Cadena = c("Hola", "Hola"),
Matriz = matrix(1:6, nrow = 2, ncol = 3))
df <- data.frame(Fruta = c("manzana", "pera",
"banana", "ciruela"),
Cantidad = 1:4)
nrow(df)  # observamos el número de filas.
ncol(df)  # observamos el número de columnas.
colnames(df) # solicitamos los nombres de las columnas.
row.names(df) # solicitamos los nombres de las filas.
attributes(df)
view(iris)
m <- matrix(1:6, nrow = 2, ncol = 3)
m # visualizamos la matriz
dim(m) # verificamos las dimensiones de la matriz
arreglo <- array(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,
13,14, 15, 16, 17, 18), dim=c(3, 3, 2))
lista <- list(Numeros = 1:5, Cadena = c("Hola", "Hola"),
Matriz = matrix(1:6, nrow = 2, ncol = 3))
df <- data.frame(Fruta = c("manzana", "pera",
"banana", "ciruela"),
Cantidad = 1:4)
nrow(df)  # observamos el número de filas.
ncol(df)  # observamos el número de columnas.
colnames(df) # solicitamos los nombres de las columnas.
row.names(df) # solicitamos los nombres de las filas.
attributes(df)
iris[1,1] # extraemos el dato de la fila 1 y columna 1
iris[1, ] # extraemos todos los datos de la fila 1
iris[,1] # extraemos todos los datos de la columna 1
iris[1] # también, de esta manera, se puede extraer la columna 1
# o indicando el nombre de la columna a extrae utilizando el símbolo "$". En este caso se extrae en forma de vector
iris$Sepal.Length
# otra manera de extraer la primera columna como un vector
iris[[1]]
iris
m <- matrix(1:6, nrow = 2, ncol = 3)
m # visualizamos la matriz
dim(m) # verificamos las dimensiones de la matriz
arreglo <- array(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,
13,14, 15, 16, 17, 18), dim=c(3, 3, 2))
lista <- list(Numeros = 1:5, Cadena = c("Hola", "Hola"),
Matriz = matrix(1:6, nrow = 2, ncol = 3))
df <- data.frame(Fruta = c("manzana", "pera",
"banana", "ciruela"),
Cantidad = 1:4)
nrow(df)  # observamos el número de filas.
ncol(df)  # observamos el número de columnas.
colnames(df) # solicitamos los nombres de las columnas.
row.names(df) # solicitamos los nombres de las filas.
attributes(df)
iris[1,1] # extraemos el dato de la fila 1 y columna 1
iris[1, ] # extraemos todos los datos de la fila 1
iris[,1] # extraemos todos los datos de la columna 1
iris[1] # también, de esta manera, se puede extraer la columna 1
# o indicando el nombre de la columna a extrae utilizando el símbolo "$". En este caso se extrae en forma de vector
iris$Sepal.Length
# otra manera de extraer la primera columna como un vector
iris[[1]]
iris_setosa <- subset(iris, Species=="setosa")
iris_setosa
m <- matrix(1:6, nrow = 2, ncol = 3)
m # visualizamos la matriz
dim(m) # verificamos las dimensiones de la matriz
arreglo <- array(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,
13,14, 15, 16, 17, 18), dim=c(3, 3, 2))
lista <- list(Numeros = 1:5, Cadena = c("Hola", "Hola"),
Matriz = matrix(1:6, nrow = 2, ncol = 3))
df <- data.frame(Fruta = c("manzana", "pera",
"banana", "ciruela"),
Cantidad = 1:4)
nrow(df)  # observamos el número de filas.
ncol(df)  # observamos el número de columnas.
colnames(df) # solicitamos los nombres de las columnas.
row.names(df) # solicitamos los nombres de las filas.
attributes(df)
iris[1,1] # extraemos el dato de la fila 1 y columna 1
iris[1, ] # extraemos todos los datos de la fila 1
iris[,1] # extraemos todos los datos de la columna 1
iris[1] # también, de esta manera, se puede extraer la columna 1
# o indicando el nombre de la columna a extrae utilizando el símbolo "$". En este caso se extrae en forma de vector
iris$Sepal.Length
# otra manera de extraer la primera columna como un vector
iris[[1]]
iris_setosa <- subset(iris, Species=="setosa")
# Filtramos a la variedad Species reteniendo solo las categorías “setosa” y “virginica”
iris_set.virginica <- subset(iris, Species in c("setosa", "virginica"))
m <- matrix(1:6, nrow = 2, ncol = 3)
m # visualizamos la matriz
dim(m) # verificamos las dimensiones de la matriz
arreglo <- array(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,
13,14, 15, 16, 17, 18), dim=c(3, 3, 2))
lista <- list(Numeros = 1:5, Cadena = c("Hola", "Hola"),
Matriz = matrix(1:6, nrow = 2, ncol = 3))
df <- data.frame(Fruta = c("manzana", "pera",
"banana", "ciruela"),
Cantidad = 1:4)
nrow(df)  # observamos el número de filas.
ncol(df)  # observamos el número de columnas.
colnames(df) # solicitamos los nombres de las columnas.
row.names(df) # solicitamos los nombres de las filas.
attributes(df)
iris[1,1] # extraemos el dato de la fila 1 y columna 1
iris[1, ] # extraemos todos los datos de la fila 1
iris[,1] # extraemos todos los datos de la columna 1
iris[1] # también, de esta manera, se puede extraer la columna 1
# o indicando el nombre de la columna a extrae utilizando el símbolo "$". En este caso se extrae en forma de vector
iris$Sepal.Length
# otra manera de extraer la primera columna como un vector
iris[[1]]
iris_setosa <- subset(iris, Species=="setosa")
# Filtramos a la variedad Species reteniendo solo las categorías “setosa” y “virginica”
iris_set.virginica <- subset(iris, Species in c("setosa", "virginica"))
df <- data.frame("Sexo" = c("hombre", "mujer", "hombre", "hombre", "mujer", "mujer", "hombre", "mujer"),
"Presión arterial" = c(119, 99, 102, 78, 78, 82, 96, 104),
"Pulsos por minuto" = c(59, 89, 107, 76, 91, 64, 78, 92))
df
datos <- data.frame("Sexo" = c("hombre", "mujer", "hombre", "hombre", "mujer", "mujer", "hombre", "mujer"),
"Presión arterial" = c(119, 99, 102, 78, 78, 82, 96, 104),
"Pulsos por minuto" = c(59, 89, 107, 76, 91, 64, 78, 92))
datos[c(1,4)]
datos <- data.frame("Sexo" = c("hombre", "mujer", "hombre", "hombre", "mujer", "mujer", "hombre", "mujer"),
"Presión arterial" = c(119, 99, 102, 78, 78, 82, 96, 104),
"Pulsos por minuto" = c(59, 89, 107, 76, 91, 64, 78, 92))
datos[c(1,4),]
datos <- data.frame("Sexo" = c("hombre", "mujer", "hombre", "hombre", "mujer", "mujer", "hombre", "mujer"),
"Presión arterial" = c(119, 99, 102, 78, 78, 82, 96, 104),
"Pulsos por minuto" = c(59, 89, 107, 76, 91, 64, 78, 92))
datos[c(1,4),]
datos[c(1,4),c(2,3)]
subset(datos, Sexo=='mujer')
subset(datos, Sexo=='mujer')[1]
datos <- data.frame("Sexo" = c("hombre", "mujer", "hombre", "hombre", "mujer", "mujer", "hombre", "mujer"),
"Presión arterial" = c(119, 99, 102, 78, 78, 82, 96, 104),
"Pulsos por minuto" = c(59, 89, 107, 76, 91, 64, 78, 92))
datos[c(1,4),]
datos[c(1,4),c(2,3)]
subset(datos, Sexo=='mujer')[1]
subset(datos, Sexo=='mujer')[1,]
subset(datos, Sexo=='mujer')[1,2] > subset(datos, Sexo=='mujer')[2,2]
datos[,3]
datos[,3] * 60
datos <- data.frame("Sexo" = c("hombre", "mujer", "hombre", "hombre", "mujer", "mujer", "hombre", "mujer"),
"Presión arterial" = c(119, 99, 102, 78, 78, 82, 96, 104),
"Pulsos por minuto" = c(59, 89, 107, 76, 91, 64, 78, 92))
datos[c(1,4),]
datos[c(1,4),c(2,3)]
subset(datos, Sexo=='mujer')[1,2] > subset(datos, Sexo=='mujer')[2,2]
datos[,3] * 60
datos
hombres_mayor100 <- subset(datos, Sexo=='hombre', "Presión arterial" > 100)
hombres_mayor100
datos <- data.frame("Sexo" = c("hombre", "mujer", "hombre", "hombre", "mujer", "mujer", "hombre", "mujer"),
"Presión_arterial" = c(119, 99, 102, 78, 78, 82, 96, 104),
"Pulsos_por_minuto" = c(59, 89, 107, 76, 91, 64, 78, 92))
datos[c(1,4),]
datos[c(1,4),c(2,3)]
subset(datos, Sexo=='mujer')[1,2] > subset(datos, Sexo=='mujer')[2,2]
datos[,3] * 60
datos
hombres_mayor100 <- subset(datos, Sexo=='hombre', "Presión_arterial" > 100)
hombres_mayor100
datos <- data.frame("Sexo" = c("hombre", "mujer", "hombre", "hombre", "mujer", "mujer", "hombre", "mujer"),
"Presión_arterial" = c(119, 99, 102, 78, 78, 82, 96, 104),
"Pulsos_por_minuto" = c(59, 89, 107, 76, 91, 64, 78, 92))
datos[c(1,4),]
datos[c(1,4),c(2,3)]
subset(datos, Sexo=='mujer')[1,2] > subset(datos, Sexo=='mujer')[2,2]
datos[,3] * 60
datos
hombres_mayor100 <- subset(datos, Sexo=='hombre' & "Presión_arterial" > 100)
hombres_mayor100
datos <- data.frame( Sexo = c("hombre", "mujer", "hombre", "hombre", "mujer", "mujer", "hombre", "mujer"),
Presión_arterial = c(119, 99, 102, 78, 78, 82, 96, 104),
Pulsos_por_minuto = c(59, 89, 107, 76, 91, 64, 78, 92))
datos[c(1,4),]
datos[c(1,4),c(2,3)]
subset(datos, Sexo=='mujer')[1,2] > subset(datos, Sexo=='mujer')[2,2]
datos[,3] * 60
datos
hombres_mayor100 <- subset(datos, Sexo=='hombre' & Presión_arterial > 100)
hombres_mayor100
datos <- data.frame( Sexo = c("hombre", "mujer", "hombre", "hombre", "mujer", "mujer", "hombre", "mujer"),
Presión_arterial = c(119, 99, 102, 78, 78, 82, 96, 104),
Pulsos_por_minuto = c(59, 89, 107, 76, 91, 64, 78, 92))
datos[c(1,4),]
datos[c(1,4),c(2,3)]
subset(datos, Sexo=='mujer')[1,2] > subset(datos, Sexo=='mujer')[2,2]
datos[,3] * 60
datos
hombres_mayor100 <- subset(datos, Sexo=='hombre' & Presión_arterial > 100)
hombres_mayor100
datos
max <- max(subset(datos, Sexo=='mujer')[3])
datos <- data.frame( Sexo = c("hombre", "mujer", "hombre", "hombre", "mujer", "mujer", "hombre", "mujer"),
Presión_arterial = c(119, 99, 102, 78, 78, 82, 96, 104),
Pulsos_por_minuto = c(59, 89, 107, 76, 91, 64, 78, 92))
datos[c(1,4),]
datos[c(1,4),c(2,3)]
subset(datos, Sexo=='mujer')[1,2] > subset(datos, Sexo=='mujer')[2,2]
datos[,3] * 60
datos
hombres_mayor100 <- subset(datos, Sexo=='hombre' & Presión_arterial > 100)
hombres_mayor100
datos
max <- max(subset(datos, Sexo=='mujer')[3])
max
# Crear un dataframe con las siguientes variables
datos <- data.frame( Sexo = c("hombre", "mujer", "hombre", "hombre", "mujer", "mujer", "hombre", "mujer"),
Presión_arterial = c(119, 99, 102, 78, 78, 82, 96, 104),
Pulsos_por_minuto = c(59, 89, 107, 76, 91, 64, 78, 92))
# Visualizar todos los valores para el primer y cuarto individuo
datos[c(1,4),]
# Repetir lo mismo pero solo para las últimas dos variables
datos[c(1,4),c(2,3)]
# Determinar si la primera mujer de la tabla tiene una presión arterial mayor a la de la segunda mujer
subset(datos, Sexo=='mujer')[1,2] > subset(datos, Sexo=='mujer')[2,2]
# Construir una nueva columna que cuente los pulsos pero por hora
datos <- mutate(datos, Pulsos_por_hora = c(datos[,3] * 60))
# Crear un dataframe con las siguientes variables
datos <- data.frame( Sexo = c("hombre", "mujer", "hombre", "hombre", "mujer", "mujer", "hombre", "mujer"),
Presión_arterial = c(119, 99, 102, 78, 78, 82, 96, 104),
Pulsos_por_minuto = c(59, 89, 107, 76, 91, 64, 78, 92))
# Visualizar todos los valores para el primer y cuarto individuo
datos[c(1,4),]
# Repetir lo mismo pero solo para las últimas dos variables
datos[c(1,4),c(2,3)]
# Determinar si la primera mujer de la tabla tiene una presión arterial mayor a la de la segunda mujer
subset(datos, Sexo=='mujer')[1,2] > subset(datos, Sexo=='mujer')[2,2]
# Construir una nueva columna que cuente los pulsos pero por hora
datos <- cbind(datos, Pulsos_por_hora = c(datos[,3] * 60))
datos
print(getwd())
setwd("Home/Materias/data/materias/exploracion-visualizacion/bd")
setwd("/Home/Materias/data/materias/exploracion-visualizacion/bd")
setwd("//Home/Materias/data/materias/exploracion-visualizacion/bd")
setwd("/Home/Materias/data/materias/exploracion-visualizacion/bd")
setwd("/usuarios/ppando/Materias/data/materias/exploracion-visualizacion/bd")
setwd("/usuarios/ppando/Materias/data/materias/exploracion-visualizacion/bd")
setwd("/usuarios/ppando/Materias/data/materias/exploracion-visualizacion/bd")
setwd("/Users/ppando/Materias/data/materias/exploracion-visualizacion/bd")
print(getwd())
bd <- "Mortalidad_infantil.csv"
df <- read.table(bd)
head(df)
print(getwd())
setwd("/Users/ppando/Materias/data/materias/exploracion-visualizacion/bd")
print(getwd())
bd <- "Mortalidad_infantil.csv"
df <- read.table(bd)
head(df)
view(df)
view(df)
print(getwd())
setwd("/Users/ppando/Materias/data/materias/exploracion-visualizacion/bd")
print(getwd())
bd <- "Mortalidad_infantil.csv"
df <- read.table(bd, sep = ";", header = TRUE)
head(df)
library(openxlsx) # cargamos la librería
install.packages("openxlsx")
library(openxlsx) # cargamos la librería
# importamos la base de datos
bd_xls = "Mortalidad_infantil.xlsx"
df <- read.xlsx(bd_xls)
head(df)
library(openxlsx) # cargamos la librería
# importamos la base de datos
bd_xls = "Mortalidad_infantil.xlsx"
df <- read.xlsx(bd_xls)
head(df)
view(df)
View(df)
View(datos)
View(df)
write.csv(x = df, file = "mort-inf.csv") # separados por coma
write.csv2(x = df, file = "mort-inf2.csv") # separados por punto y coma
# exportar archivo de excel
write.xlsx(x = df, file = "mort-inf.xlsx", rowNames = FALSE)
setwd("/Users/ppando/Materias/data/materias/exploracion-visualizacion/bd")
datos <- data.frame(sexo = c("hombre", "mujer", "hombre", "hombre", "mujer", "mujer", "hombre", "mujer"),
presion_arterial = c(119, 99, 102, 78, 78, 82, 96, 104),
pulsos_por_minuto = c(59, 89, 107, 76, 91, 64, 78, 92))
promedio_presion_arterial <- aggregate(presion_arterial ~ sexo,
FUN = mean,
data = datos)
minimo_pulsos_por_minuto <- aggregate(presion_arterial ~ sexo,
FUN = min,
data = datos)
# Con la función "save" guardamos todos los objetos en un solo archivo.
save(datos, promedio_presion_arterial, minimo_pulsos_por_minuto, file="salud.RData")
# Con la función "load" cargamos el archivo en el espacio de trabajo, por lo que tendremos disponibles nuevamente todos los objetos.
load("salud.RData")
View(datos)
load("~/Materias/data/materias/exploracion-visualizacion/bd/salud.RData")
setwd("/Users/ppando/Materias/data/materias/exploracion-visualizacion/bd")
bd_csv <- "usuarios_ecobici_2024.csv"
df <- read.table(bd_csv, sep = ";", header = TRUE)
head(df)
View(df)
setwd("/Users/ppando/Materias/data/materias/exploracion-visualizacion/bd")
bd_csv <- "usuarios_ecobici_2024.csv"
df <- read.table(bd_csv, sep = ",", header = TRUE)
head(df)
View(df)
setwd("/Users/ppando/Materias/data/materias/exploracion-visualizacion/bd")
bd_csv <- "usuarios_ecobici_2024.csv"
df <- read.table(bd_csv, sep = ",", header = TRUE)
head(df)
df[c(1),]
setwd("/Users/ppando/Materias/data/materias/exploracion-visualizacion/bd")
bd_csv <- "usuarios_ecobici_2024.csv"
df <- read.table(bd_csv, sep = ",", header = TRUE)
head(df)
names(df)
max(df$edad_usuario)
subset(df, genero_usuario=='FEMALE' & max(edad_usuario))
df_females <- subset(df, genero_usuario=='FEMALE')
~df_females[order(-abs(df_females[,.edad_usuario]))[1:10], ]
~df_females[order(-abs(df_females[,.edad_usuario]))[1:10], ]
~df_females[order(-abs(df_females[,.edad_usuario]))[1], ]
df_females <- subset(df, genero_usuario=='FEMALE')
~df_females[order(-abs(df_females[,.edad_usuario]))[1], ]
df_females <- subset(df, genero_usuario=='FEMALE')
edad <- ~df_females[order(-abs(df_females[,.edad_usuario]))[1], ]
print(edad)
edad <- ~df_females[order(-abs(df_females[,df_females$edad_usuario]))[1], ]
print(edad)
df_females <- subset(df, genero_usuario=='FEMALE')
edad <- df_females[order(-abs(df_females[,df_females$edad_usuario]))[1], ]
x %>% sum %>% sqrt
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
x <- c(1, 2, 3, 4)
x %>% sum %>% sqrt
library(dplyr)
setwd("/Users/ppando/Materias/data/materias/exploracion-visualizacion/bd")
bd <- "properati (USD).csv"
properati <- read.csv2(bd, stringsAsFactors = TRUE)
properati1 <- properati %>% select(place_name, price, year)
View(properati1)
properati2 <- properati1 %>% mutate(price_pesos = price*1000)
View(properati2)
niveles_barrios <- sort(unique(properati$place_name)[1:10])
niveles_barrios <- sort(unique(properati$place_name))[1:10]
niveles_barrios
properati3 <- properati2 %>% filter(place_name %in% niveles_barrios & year > 2015)
View(properati3)
properati4 <- properati3 %>% arrange(desc(price_pesos))
View(properati4)
# Calcular el promedio, minimo y máximo del precio en pesos por barrios
properati5 <- properati4 %>%
group_by(place_name) %>%
summarise(promedio_precio_pesos = mean(price_pesos),
min_precio_pesos = min(price_pesos),
max_precio_pesos = max(price_pesos))
View(properati5)
install.packages("tidyr")
properati_ancho <- properati %>% group_by(place_name, year) %>%
summarise(precio_promedio = mean(price)) %>%
pivot_wider(names_from = year,values_from = precio_promedio)
library(tidyr)
properati_ancho <- properati %>% group_by(place_name, year) %>%
summarise(precio_promedio = mean(price)) %>%
pivot_wider(names_from = year,values_from = precio_promedio)
View(properati_ancho)
install.packages("gapminder")
