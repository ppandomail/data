# Asigno a cada mes su número correspondiente y creo una variable NMonth
datos$NMonth <- match(datos$Month, meses)
filtrado <- datos %>%
filter(Year == "2018" & Category %in% c("HEALTH_AND_FITNESS","EDUCATION","ENTERTAINMENT")) %>%
group_by(Month, Category) %>%
summarise(Total_Actualizaciones = n(), .groups = "drop") %>%
arrange(NMonth)
ggplot(filtrado, aes(x = Month, y = Total_Actualizaciones, group = Category, color = Category)) +
geom_line(size = 1) +
geom_point(size = 3) +
theme_minimal() +
labs(title = "Evolución de Actualizaciones por Mes (2018)",
x = "Mes",
y = "Total de Actualizaciones",
color = "Categoría")
meses <- c("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December")
# Divido la fecha, extraigo el mes de cada caso y creo una variable Month
datos$Month <- sapply(strsplit(datos$Last.Updated, " "), function(x) x[1])
# Asigno a cada mes su número correspondiente y creo una variable NMonth
datos$NMonth <- match(datos$Month, meses)
filtrado <- datos %>%
filter(Year == "2018" & Category %in% c("HEALTH_AND_FITNESS","EDUCATION","ENTERTAINMENT")) %>%
group_by(Month, Category) %>%
summarise(Total_Actualizaciones = n(), .groups = "drop")
ggplot(filtrado, aes(x = Month, y = Total_Actualizaciones, group = Category, color = Category)) +
geom_line(size = 1) +
geom_point(size = 3) +
theme_minimal() +
labs(title = "Evolución de Actualizaciones por Mes (2018)",
x = "Mes",
y = "Total de Actualizaciones",
color = "Categoría")
meses <- c("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December")
# Divido la fecha, extraigo el mes de cada caso y creo una variable Month
datos$Month <- sapply(strsplit(datos$Last.Updated, " "), function(x) x[1])
# Asigno a cada mes su número correspondiente y creo una variable NMonth
datos$NMonth <- match(datos$Month, meses)
filtrado <- datos %>%
filter(Year == "2018" & Category %in% c("HEALTH_AND_FITNESS","EDUCATION","ENTERTAINMENT")) %>%
group_by(Month, NMonth, Category) %>%
summarise(Total_Actualizaciones = n(), .groups = "drop") %>%
arrange(NMonth)
ggplot(filtrado, aes(x = Month, y = Total_Actualizaciones, group = Category, color = Category)) +
geom_line(size = 1) +
geom_point(size = 3) +
theme_minimal() +
labs(title = "Evolución de Actualizaciones por Mes (2018)",
x = "Mes",
y = "Total de Actualizaciones",
color = "Categoría")
meses <- c("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December")
# Divido la fecha, extraigo el mes de cada caso y creo una variable Month
datos$Month <- sapply(strsplit(datos$Last.Updated, " "), function(x) x[1])
# Asigno a cada mes su número correspondiente y creo una variable NMonth
datos$NMonth <- match(datos$Month, meses)
filtrado <- datos %>%
filter(Year == "2018" & Category %in% c("HEALTH_AND_FITNESS","EDUCATION","ENTERTAINMENT")) %>%
group_by(Month, NMonth, Category) %>%
summarise(Total_Actualizaciones = n(), .groups = "drop") %>%
arrange(NMonth)
ggplot(filtrado, aes(x = Month, y = Total_Actualizaciones, group = Category, color = Category)) +
geom_line(size = 1) +
geom_point(size = 3) +
theme_minimal() +
labs(title = "Evolución de Actualizaciones por Mes (2018)",
x = "Mes",
y = "Total de Actualizaciones",
color = "Categoría")
meses <- c("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December")
# Divido la fecha, extraigo el mes de cada caso y creo una variable Month
datos$Month <- sapply(strsplit(datos$Last.Updated, " "), function(x) x[1])
# Asigno a cada mes su número correspondiente y creo una variable NMonth
datos$NMonth <- factor(match(datos$Month, meses), levels = 1:12)
filtrado <- datos %>%
filter(Year == "2018" & Category %in% c("HEALTH_AND_FITNESS","EDUCATION","ENTERTAINMENT")) %>%
group_by(Month, NMonth, Category) %>%
summarise(Total_Actualizaciones = n(), .groups = "drop") %>%
arrange(NMonth)
ggplot(filtrado, aes(x = Month, y = Total_Actualizaciones, group = Category, color = Category)) +
geom_line(size = 1) +
geom_point(size = 3) +
theme_minimal() +
labs(title = "Evolución de Actualizaciones por Mes (2018)",
x = "Mes",
y = "Total de Actualizaciones",
color = "Categoría")
meses <- c("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December")
# Divido la fecha, extraigo el mes de cada caso y creo una variable Month
datos$Month <- sapply(strsplit(datos$Last.Updated, " "), function(x) x[1])
# Asigno a cada mes su número correspondiente y creo una variable NMonth
datos$NMonth <- factor(match(datos$Month, meses), levels = 1:12)
filtrado <- datos %>%
filter(Year == "2018" & Category %in% c("HEALTH_AND_FITNESS","EDUCATION","ENTERTAINMENT")) %>%
group_by(Month, NMonth, Category) %>%
summarise(Total_Actualizaciones = n(), .groups = "drop") %>%
arrange(NMonth)
ggplot(filtrado, aes(x = Month, y = Total_Actualizaciones, group = Category, color = Category)) +
geom_line(size = 1) +
geom_point(size = 3) +
theme_minimal() +
labs(title = "Evolución de Actualizaciones por Mes (2018)",
x = "Mes",
y = "Total de Actualizaciones",
color = "Categoría")
meses <- c("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December")
# Divido la fecha, extraigo el mes de cada caso y creo una variable Month
datos$Month <- sapply(strsplit(datos$Last.Updated, " "), function(x) x[1])
# Asigno a cada mes su número correspondiente y creo una variable NMonth
datos$NMonth <- factor(match(datos$Month, meses), levels = 1:12)
filtrado <- datos %>%
filter(Year == "2018" & Category %in% c("HEALTH_AND_FITNESS","EDUCATION","ENTERTAINMENT")) %>%
group_by(Month, NMonth, Category) %>%
summarise(Total_Actualizaciones = n(), .groups = "drop") %>%
arrange(NMonth)
ggplot(filtrado, aes(x = NMonth, y = Total_Actualizaciones, group = Category, color = Category)) +
geom_line(size = 1) +
geom_point(size = 3) +
theme_minimal() +
labs(title = "Evolución de Actualizaciones por Mes (2018)",
x = "Mes",
y = "Total de Actualizaciones",
color = "Categoría")
# Filtro aplicaciones con Content.Rating "Teen" y creo un indicador para diferenciar grupos
filtrado <- datos %>%
filter(Content.Rating == "Teen") %>%
mutate(Grupo = ifelse(Category %in% c("ENTERTAINMENT", "GAME"), "Entretenimiento/Juego", "Otros")) %>%
group_by(Grupo) %>%
summarise(
Total_Apps = n()
)
ggplot(filtrado, aes(x = Grupo, y = Total_Apps, fill = Grupo)) +
geom_bar(stat = "identity") +
theme_minimal() +
geom_text(aes(label = Total_Apps), vjust = -0.5) +
labs(title = "Comparación del total de aplicaciones (Teen)",
x = "Grupo", y = "Total de Aplicaciones",
fill = "Grupo")
# Filtro aplicaciones con Content.Rating "Teen" y creo un indicador para diferenciar grupos
filtrado <- datos %>%
filter(Content.Rating == "Teen") %>%
mutate(Grupo = ifelse(Category %in% c("ENTERTAINMENT", "GAME"), "Entretenimiento/Juego", "Otros")) %>%
group_by(Grupo) %>%
summarise(
Total_Apps = n(),
Total_Rating = sum(Rating)
)
ggplot(filtrado, aes(x = Grupo, y = Total_Apps, fill = Grupo)) +
geom_bar(stat = "identity") +
theme_minimal() +
geom_text(aes(label = Total_Apps), vjust = -0.5) +
labs(title = "Comparación del total de aplicaciones (Teen)",
x = "Grupo", y = "Total de Aplicaciones",
fill = "Grupo")
# Filtro aplicaciones con Content.Rating "Teen" y creo un indicador para diferenciar grupos
filtrado <- datos %>%
filter(Content.Rating == "Teen") %>%
mutate(Grupo = ifelse(Category %in% c("ENTERTAINMENT", "GAME"), "Entretenimiento/Juego", "Otros")) %>%
group_by(Grupo) %>%
summarise(
Total_Apps = n(),
Total_Rating = sum(Rating),
Total_Reviews = sum(Reviews),
Total_Size = sum(Size),
Total_Installs = sum(Installs)
)
ggplot(filtrado, aes(x = Grupo, y = Total_Apps, fill = Grupo)) +
geom_bar(stat = "identity") +
theme_minimal() +
geom_text(aes(label = Total_Apps), vjust = -0.5) +
labs(title = "Comparación del total de aplicaciones (Teen)",
x = "Grupo", y = "Total de Aplicaciones",
fill = "Grupo")
# Filtro aplicaciones con Content.Rating "Teen" y creo un indicador para diferenciar grupos
filtrado <- datos %>%
filter(Content.Rating == "Teen") %>%
mutate(Grupo = ifelse(Category %in% c("ENTERTAINMENT", "GAME"), "Entretenimiento/Juego", "Otros")) %>%
group_by(Grupo) %>%
summarise(
Total_Apps = n(),
Total_Rating = sum(Rating),
Total_Reviews = sum(Reviews),
Total_Size = sum(Size),
Total_Installs = sum(Installs)
) %>%
pivot_longer(cols = c(Total_Apps, Total_Rating, Total_Reviews, Total_Size, Total_Installs),
names_to = "Métrica", values_to = "Valor")
ggplot(filtrado, aes(x = Grupo, y = Total_Apps, fill = Grupo)) +
geom_bar(stat = "identity") +
theme_minimal() +
geom_text(aes(label = Total_Apps), vjust = -0.5) +
labs(title = "Comparación del total de aplicaciones (Teen)",
x = "Grupo", y = "Total de Aplicaciones",
fill = "Grupo")
# Filtro aplicaciones con Content.Rating "Teen" y creo un indicador para diferenciar grupos
filtrado <- datos %>%
filter(Content.Rating == "Teen") %>%
mutate(Grupo = ifelse(Category %in% c("ENTERTAINMENT", "GAME"), "Entretenimiento/Juego", "Otros")) %>%
group_by(Grupo) %>%
summarise(
Total_Apps = n(),
Total_Rating = sum(Rating),
Total_Reviews = sum(Reviews),
Total_Size = sum(Size),
Total_Installs = sum(Installs)
) %>%
pivot_longer(cols = c(Total_Apps, Total_Rating, Total_Reviews, Total_Size, Total_Installs),
names_to = "Métrica", values_to = "Valor")
ggplot(filtrado, aes(x = Grupo, y = Valor, fill = Métrica)) +
geom_bar(stat = "identity", position = "dodge") +
theme_minimal() +
labs(title = "Comparación de métricas por grupo",
x = "Grupo", y = "Valor") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(filtrado, aes(x = Grupo, y = Total_Apps, fill = Grupo)) +
geom_bar(stat = "identity") +
theme_minimal() +
geom_text(aes(label = Total_Apps), vjust = -0.5) +
labs(title = "Comparación del total de aplicaciones (Teen)",
x = "Grupo", y = "Total de Aplicaciones",
fill = "Grupo")
# Filtro aplicaciones con Content.Rating "Teen" y creo un indicador para diferenciar grupos
filtrado <- datos %>%
filter(Content.Rating == "Teen") %>%
mutate(Grupo = ifelse(Category %in% c("ENTERTAINMENT", "GAME"), "Entretenimiento/Juego", "Otros")) %>%
group_by(Grupo) %>%
summarise(
Total_Apps = n(),
Total_Rating = sum(Rating),
Total_Reviews = sum(Reviews),
Total_Size = sum(Size),
Total_Installs = sum(Installs)
) %>%
pivot_longer(cols = c(Total_Apps, Total_Rating, Total_Reviews, Total_Size, Total_Installs),
names_to = "Métrica", values_to = "Valor")
ggplot(filtrado, aes(x = Grupo, y = Valor, fill = Métrica)) +
geom_bar(stat = "identity", position = "dodge") +
theme_minimal() +
labs(title = "Comparación de métricas por grupo",
x = "Grupo", y = "Valor") +
theme(plot.title = element_text(hjust = 0.5))
# Filtro aplicaciones con Content.Rating "Teen" y creo un indicador para diferenciar grupos
filtrado <- datos %>%
filter(Content.Rating == "Teen") %>%
mutate(Grupo = ifelse(Category %in% c("ENTERTAINMENT", "GAME"), "Entretenimiento/Juego", "Otros")) %>%
group_by(Grupo) %>%
summarise(
Total_Apps = n(),
Total_Rating = sum(Rating),
Total_Reviews = sum(Reviews),
Total_Size = sum(Size),
Total_Installs = sum(Installs),
Total_Price = sum(Price)
) %>%
pivot_longer(cols = c(Total_Apps, Total_Rating, Total_Reviews, Total_Size, Total_Installs),
names_to = "Métrica", values_to = "Valor")
ggplot(filtrado, aes(x = Grupo, y = Valor, fill = Métrica)) +
geom_bar(stat = "identity", position = "dodge") +
theme_minimal() +
labs(title = "Comparación de métricas por grupo",
x = "Grupo", y = "Valor") +
theme(plot.title = element_text(hjust = 0.5))
# Filtro aplicaciones con Content.Rating "Teen" y creo un indicador para diferenciar grupos
filtrado <- datos %>%
filter(Content.Rating == "Teen") %>%
mutate(Grupo = ifelse(Category %in% c("ENTERTAINMENT", "GAME"), "Entretenimiento/Juego", "Otros")) %>%
group_by(Grupo) %>%
summarise(
Total_Apps = n(),
Total_Rating = sum(Rating),
Total_Reviews = sum(Reviews),
Total_Size = sum(Size),
Total_Installs = sum(Installs),
Total_Price = sum(Price)
) %>%
pivot_longer(cols = c(Total_Apps, Total_Rating, Total_Reviews, Total_Size, Total_Installs, Total_Price),
names_to = "Métrica", values_to = "Valor")
ggplot(filtrado, aes(x = Grupo, y = Valor, fill = Métrica)) +
geom_bar(stat = "identity", position = "dodge") +
theme_minimal() +
labs(title = "Comparación de métricas por grupo",
x = "Grupo", y = "Valor") +
theme(plot.title = element_text(hjust = 0.5))
# Filtro aplicaciones con Content.Rating "Teen" y creo un indicador para diferenciar grupos
filtrado <- datos %>%
filter(Content.Rating == "Teen") %>%
mutate(Grupo = ifelse(Category %in% c("ENTERTAINMENT", "GAME"), "Entretenimiento/Juego", "Otros")) %>%
group_by(Grupo) %>%
summarise(
Total_Apps = n(),
Total_Rating = sum(Rating),
Total_Reviews = sum(Reviews),
Total_Size = sum(Size),
Total_Price = sum(Price)
) %>%
pivot_longer(cols = c(Total_Apps, Total_Rating, Total_Reviews, Total_Size, Total_Price),
names_to = "Métrica", values_to = "Valor")
ggplot(filtrado, aes(x = Grupo, y = Valor, fill = Métrica)) +
geom_bar(stat = "identity", position = "dodge") +
theme_minimal() +
labs(title = "Comparación de métricas por grupo",
x = "Grupo", y = "Valor") +
theme(plot.title = element_text(hjust = 0.5))
# Filtro aplicaciones con Content.Rating "Teen" y creo un indicador para diferenciar grupos
filtrado <- datos %>%
filter(Content.Rating == "Teen") %>%
mutate(Grupo = ifelse(Category %in% c("ENTERTAINMENT", "GAME"), "Entretenimiento/Juego", "Otros")) %>%
group_by(Grupo) %>%
summarise(
Total_Apps = n(),
Total_Rating = sum(Rating),
Total_Size = sum(Size),
Total_Price = sum(Price)
) %>%
pivot_longer(cols = c(Total_Apps, Total_Rating, Total_Size, Total_Price),
names_to = "Métrica", values_to = "Valor")
ggplot(filtrado, aes(x = Grupo, y = Valor, fill = Métrica)) +
geom_bar(stat = "identity", position = "dodge") +
theme_minimal() +
labs(title = "Comparación de métricas por grupo",
x = "Grupo", y = "Valor") +
theme(plot.title = element_text(hjust = 0.5))
# Filtro aplicaciones con Content.Rating "Teen" y creo un indicador para diferenciar grupos
filtrado <- datos %>%
group_by(Grupo) %>%
summarise(
Total_Size = sum(Size),
Total_Price = sum(Price)
) %>%
pivot_longer(cols = c(Total_Apps, Total_Rating, Total_Size, Total_Price),
names_to = "Métrica", values_to = "Valor")
ggplot(filtrado, aes(x = Grupo, y = Valor, fill = Métrica)) +
geom_bar(stat = "identity", position = "dodge") +
theme_minimal() +
labs(title = "Comparación de métricas por grupo",
x = "Grupo", y = "Valor") +
theme(plot.title = element_text(hjust = 0.5))
# Filtro aplicaciones con Content.Rating "Teen" y creo un indicador para diferenciar grupos
filtrado <- datos %>%
group_by(Grupo) %>%
summarise(
Total_Size = sum(Size),
Total_Price = sum(Price)
) %>%
pivot_longer(cols = c(Total_Size, Total_Price),
names_to = "Métrica",
values_to = "Valor")
ggplot(filtrado, aes(x = Grupo, y = Valor, fill = Métrica)) +
geom_bar(stat = "identity", position = "dodge") +
theme_minimal() +
labs(title = "Comparación de métricas por grupo",
x = "Grupo", y = "Valor") +
theme(plot.title = element_text(hjust = 0.5))
# Filtro aplicaciones con Content.Rating "Teen" y creo un indicador para diferenciar grupos
filtrado <- datos %>%
group_by(Category) %>%
summarise(
Total_Size = sum(Size),
Total_Price = sum(Price)
) %>%
pivot_longer(cols = c(Total_Size, Total_Price),
names_to = "Métrica",
values_to = "Valor")
ggplot(filtrado, aes(x = Category, y = Valor, fill = Métrica)) +
geom_bar(stat = "identity", position = "dodge") +
theme_minimal() +
labs(title = "Comparación de métricas por grupo",
x = "Grupo", y = "Valor") +
theme(plot.title = element_text(hjust = 0.5))
# Filtro aplicaciones con Content.Rating "Teen" y creo un indicador para diferenciar grupos
filtrado <- datos %>%
summarise(
Total_Size = sum(Size),
Total_Price = sum(Price)
) %>%
pivot_longer(cols = c(Total_Size, Total_Price),
names_to = "Métrica",
values_to = "Valor")
ggplot(filtrado, aes(x = Category, y = Valor, fill = Métrica)) +
geom_bar(stat = "identity", position = "dodge") +
theme_minimal() +
labs(title = "Comparación de métricas por grupo",
x = "Grupo", y = "Valor") +
theme(plot.title = element_text(hjust = 0.5))
# Filtro aplicaciones con Content.Rating "Teen" y creo un indicador para diferenciar grupos
filtrado <- datos %>%
group_by(App) %>%
summarise(
Total_Size = sum(Size),
Total_Price = sum(Price)
) %>%
pivot_longer(cols = c(Total_Size, Total_Price),
names_to = "Métrica",
values_to = "Valor")
ggplot(filtrado, aes(x = Category, y = Valor, fill = Métrica)) +
geom_bar(stat = "identity", position = "dodge") +
theme_minimal() +
labs(title = "Comparación de métricas por grupo",
x = "Grupo", y = "Valor") +
theme(plot.title = element_text(hjust = 0.5))
# Filtro aplicaciones con Content.Rating "Teen" y creo un indicador para diferenciar grupos
filtrado <- datos %>%
group_by(App) %>%
summarise(
Total_Size = sum(Size),
Total_Price = sum(Price)
) %>%
pivot_longer(cols = c(Total_Size, Total_Price),
names_to = "Métrica",
values_to = "Valor")
ggplot(filtrado, aes(x = App, y = Valor, fill = Métrica)) +
geom_bar(stat = "identity", position = "dodge") +
theme_minimal() +
labs(title = "Comparación de métricas por grupo",
x = "Grupo", y = "Valor") +
theme(plot.title = element_text(hjust = 0.5))
# Calculo la correlación entre Size y Price para ver si existe una relación estadística entre ambos valores
correlation_global <- cor(datos$Size, datos$Price, use = "complete.obs")
print(correlation_global)
#
# Filtro aplicaciones con Content.Rating "Teen" y creo un indicador para diferenciar grupos
filtrado <- datos %>%
group_by(App) %>%
summarise(
Total_Size = sum(Size),
Total_Price = sum(Price)
) %>%
pivot_longer(cols = c(Total_Size, Total_Price),
names_to = "Métrica",
values_to = "Valor")
ggplot(filtrado, aes(x = App, y = Valor, fill = Métrica)) +
geom_bar(stat = "identity", position = "dodge") +
theme_minimal() +
labs(title = "Comparación de métricas por grupo",
x = "Grupo", y = "Valor") +
theme(plot.title = element_text(hjust = 0.5))
# Calculo la correlación entre Size y Price para ver si existe una relación estadística entre ambos valores
correlacion_global <- cor(datos$Size, datos$Price, use = "complete.obs")
print(correlacion_global)
# -0.0171171
# Como el valor está muy próximo a 0, significa que no hay una relación lineal clara entre Size y Price; es decir, el tamaño de la app no parece influir en su precio de forma evidente
# Filtro datos por las categorías seleccionadas
filtrado <- datos %>% filter(Category %in% c("GAME", "BUSINESS", "TOOLS", "LIFESTYLE"))
# Calculo correlaciones por categoría
correlaciones_por_categoria <- datos_filtrados %>%
group_by(Category) %>%
summarise(
Correlación_Size_Price = cor(Size, Price, use = "complete.obs")
)
print(correlaciones_por_categoria)
# Calculo la correlación entre Size y Price para ver si existe una relación estadística entre ambos valores
correlacion_global <- cor(datos$Size, datos$Price, use = "complete.obs")
print(correlacion_global)
# -0.0171171
# Como el valor está muy próximo a 0, significa que no hay una relación lineal clara entre Size y Price; es decir, el tamaño de la app no parece influir en su precio de forma evidente
# Filtro datos por las categorías seleccionadas
filtrado <- datos %>% filter(Category %in% c("GAME", "BUSINESS", "TOOLS", "LIFESTYLE"))
# Calculo correlaciones por categoría
correlaciones_por_categoria <- filtrado %>%
group_by(Category) %>%
summarise(
Correlación_Size_Price = cor(Size, Price, use = "complete.obs")
)
print(correlaciones_por_categoria)
# Calculo la correlación entre Size y Price para ver si existe una relación estadística entre ambos valores
correlacion_global <- cor(datos$Size, datos$Price, use = "complete.obs")
print(correlacion_global)
# -0.0171171
# Como el valor está muy próximo a 0, significa que no hay una relación lineal clara entre Size y Price; es decir, el tamaño de la app no parece influir en su precio de forma evidente
# Filtro datos por las categorías seleccionadas
filtrado <- datos %>% filter(Category %in% c("GAME", "BUSINESS", "TOOLS", "LIFESTYLE"))
# Calculo correlaciones por categoría
correlaciones_por_categoria <- filtrado %>%
group_by(Category) %>%
summarise(
Correlación_Size_Price = cor(Size, Price, use = "complete.obs")
)
print(correlaciones_por_categoria)
ggplot(filtrado, aes(x = Size, y = Price, color = Category)) +
geom_point(alpha = 0.6) +
geom_smooth(method = "lm", se = FALSE) +
theme_minimal() +
labs(title = "Relación entre tamaño y precio por categoría",
x = "Tamaño de la app (MB)", y = "Precio")
library(dplyr)
library(ggplot2)
library(ggthemes)
library(hrbrthemes)
library(plotly)
library(tidyr)
library(tidyverse)
library(scales)
library(mice)
# Borro ambiente de trabajo
rm(list = ls())
# Seteo directorio de trabajo
setwd("/Users/ppando/Materias/data/materias/exploracion-visualizacion/tp")
# Cargo datos del archivo
datos <- read.csv("googleplaystore.csv", sep = ",")
# Verifico cantidad de casos
nrow(datos) > 0
# Muestro los primeros 6 casos
head(datos)
# Identifico filas duplicadas
duplicados <- duplicated(datos)
# Verifico existencia de filas duplicadas
sum(duplicados) > 0
# Identifico cuales son los duplicados
filter(datos, duplicados)
# Nuevo data frame con datos únicos
datos <- distinct(datos)
# Verifico sin duplicados
sum(duplicated(datos)) == 0
