RI <-  Q3 - Q1
lim_izq <- Q1 - 3*RI
lim_der <- Q3 + 3*RI
atipicos <- datos %>% filter(IMC < lim_izq | IMC > lim_der)
# No hay
# Detectamos datos muy atípicos en ingreso
Q1 <- quantile(datos$ingreso, 0.25)
Q3 <- quantile(datos$ingreso, 0.75)
RI <-  Q3 - Q1
lim_izq <- Q1 - 3*RI
lim_der <- Q3 + 3*RI
atipicos <- datos %>% filter(ingreso < lim_izq | ingreso > lim_der)
# No hay
# Detectamos datos muy atípicos en premio
Q1 <- quantile(datos$premio, 0.25)
Q3 <- quantile(datos$premio, 0.75)
RI <-  Q3 - Q1
lim_izq <- Q1 - 3*RI
lim_der <- Q3 + 3*RI
atipicos <- datos %>% filter(premio < lim_izq | premio > lim_der)
atipicos
# Lo eliminamos
datos <- datos %>% filter(premio != max(premio))
# Declaramos a las variables cualitativas como factor, para poder reconocer categorias
datos$Genero <- as.factor(datos$Genero)
datos$Fuma <- as.factor(datos$Fuma)
datos$Region <- as.factor(datos$Region)
# Mostramos medidas resumen
summary(datos)
# Calculamos la matriz de correlación que nos muestra los coeficientes de correlación entre cada para de variables.
correlaciones <- cor(datos)
correlaciones
# Calculamos la matriz de correlación que nos muestra los coeficientes de correlación entre cada para de variables.
datos_numericos <- datos %>% select(Edad, IMC, ingreso, premio)
correlaciones <- cor(datos_numericos)
correlaciones
# Calculamos la matriz de correlación que nos muestra los coeficientes de correlación entre cada para de variables.
datos_numericos <- datos %>% select(Edad, IMC, ingreso, premio)
correlaciones <- cor(datos_numericos)
correlaciones
# Si alguna correlación está cercana a 1 o -1, significa que hay una relación fuerte (positiva
# Valores cercanos a
# 1: Correlación positiva fuerte. A medida que una variable aumenta, la otra también tiende a aumentar.
# -1: Correlación negativa fuerte. Si una variable sube, la otra tiende a bajar.
# 0: Correlación débil o nula. No hay una relación clara entre las variables.
# Visualizamos las correlaciones mediante un mapa de calor
corrplot(correlaciones, method = "color", addCoef.col = "black")
library(readxl)
library(dplyr)
library(ggplot2)
library(ggthemes)
library(hrbrthemes)
library(plotly)
library(tidyr)
library(tidyverse)
library(scales)
library(corrplot)
install.packages("corrplot")
library(readxl)
library(dplyr)
library(ggplot2)
library(ggthemes)
library(hrbrthemes)
library(plotly)
library(tidyr)
library(tidyverse)
library(scales)
library(corrplot)
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
message = FALSE,
eval = TRUE,
fig.width = 6,
fig.height = 4,
fig.align = "center",
class.source = "badCode")
options(width = 90)
library(readxl)
library(dplyr)
library(ggplot2)
library(ggthemes)
library(hrbrthemes)
library(plotly)
library(tidyr)
library(tidyverse)
library(scales)
library(corrplot)
# Borramos ambiente de trabajo
rm(list = ls())
# Seteamos directorio de trabajo
setwd("/Users/ppando/Materias/data/materias/estadistica/tp_grupal")
# Cargamos datos del archivo
datos <- read_xlsx("seguros.xlsx")
# Verificamos cantidad de casos
nrow(datos) > 0
# Mostramos los primeros 6 casos
head(datos)
# Mostramos estructura de los datos
str(datos)
# cuali = {Genero, Fuma, Region}
# cuanti = {Edad, IMC, ingreso, premio}
# Contamos número de nulos por variables (columnas)
sapply(datos, function(x) sum(is.na(x)))
# Eliminamos casos (filas) con nulos
datos <- datos[!is.na(datos$Fuma),]
# Otra forma: datos <- na.omit(datos)
par(mfrow = c(2, 2))
ggplot(datos, aes(Edad)) + geom_boxplot()
ggplot(datos, aes(IMC)) + geom_boxplot()
ggplot(datos, aes(ingreso)) + geom_boxplot()
ggplot(datos, aes(premio)) + geom_boxplot()
# Detectamos datos muy atípicos en Edad
Q1 <- quantile(datos$Edad, 0.25)
Q3 <- quantile(datos$Edad, 0.75)
RI <-  Q3 - Q1
lim_izq <- Q1 - 3*RI
lim_der <- Q3 + 3*RI
atipicos <- datos %>% filter(Edad < lim_izq | Edad > lim_der)
# No hay
# Detectamos datos muy atípicos en IMC
Q1 <- quantile(datos$IMC, 0.25)
Q3 <- quantile(datos$IMC, 0.75)
RI <-  Q3 - Q1
lim_izq <- Q1 - 3*RI
lim_der <- Q3 + 3*RI
atipicos <- datos %>% filter(IMC < lim_izq | IMC > lim_der)
# No hay
# Detectamos datos muy atípicos en ingreso
Q1 <- quantile(datos$ingreso, 0.25)
Q3 <- quantile(datos$ingreso, 0.75)
RI <-  Q3 - Q1
lim_izq <- Q1 - 3*RI
lim_der <- Q3 + 3*RI
atipicos <- datos %>% filter(ingreso < lim_izq | ingreso > lim_der)
# No hay
# Detectamos datos muy atípicos en premio
Q1 <- quantile(datos$premio, 0.25)
Q3 <- quantile(datos$premio, 0.75)
RI <-  Q3 - Q1
lim_izq <- Q1 - 3*RI
lim_der <- Q3 + 3*RI
atipicos <- datos %>% filter(premio < lim_izq | premio > lim_der)
atipicos
# Lo eliminamos
datos <- datos %>% filter(premio != max(premio))
# Declaramos a las variables cualitativas como factor, para poder reconocer categorias
datos$Genero <- as.factor(datos$Genero)
datos$Fuma <- as.factor(datos$Fuma)
datos$Region <- as.factor(datos$Region)
# Mostramos medidas resumen
summary(datos)
# Calculamos la matriz de correlación que nos muestra los coeficientes de correlación entre cada para de variables.
datos_numericos <- datos %>% select(Edad, IMC, ingreso, premio)
correlaciones <- cor(datos_numericos)
correlaciones
# Si alguna correlación está cercana a 1 o -1, significa que hay una relación fuerte (positiva
# Valores cercanos a
# 1: Correlación positiva fuerte. A medida que una variable aumenta, la otra también tiende a aumentar.
# -1: Correlación negativa fuerte. Si una variable sube, la otra tiende a bajar.
# 0: Correlación débil o nula. No hay una relación clara entre las variables.
# Visualizamos las correlaciones mediante un mapa de calor
corrplot(correlaciones, method = "color", addCoef.col = "black")
# Calculamos la matriz de correlación que nos muestra los coeficientes de correlación entre cada para de variables.
datos_numericos <- datos %>% select(Edad, IMC, ingreso, premio)
correlaciones <- cor(datos_numericos)
correlaciones
# Si alguna correlación está cercana a 1 o -1, significa que hay una relación fuerte (positiva
# Valores cercanos a
# 1: Correlación positiva fuerte. A medida que una variable aumenta, la otra también tiende a aumentar.
# -1: Correlación negativa fuerte. Si una variable sube, la otra tiende a bajar.
# 0: Correlación débil o nula. No hay una relación clara entre las variables.
# Definimos una paleta de colores
colores <- colorRampPalette(c("blue", "white", "red"))(200)
# Visualizamos las correlaciones mediante un mapa de calor
corrplot(correlaciones, method = "color", col = colores, addCoef.col = "black")
# Calculamos la matriz de correlación que nos muestra los coeficientes de correlación entre cada para de variables.
datos_numericos <- datos %>% select(Edad, IMC, ingreso, premio)
correlaciones <- cor(datos_numericos)
correlaciones
# Si alguna correlación está cercana a 1 o -1, significa que hay una relación fuerte (positiva
# Valores cercanos a
# 1: Correlación positiva fuerte. A medida que una variable aumenta, la otra también tiende a aumentar.
# -1: Correlación negativa fuerte. Si una variable sube, la otra tiende a bajar.
# 0: Correlación débil o nula. No hay una relación clara entre las variables.
# Definimos una paleta de colores
colores <- colorRampPalette(c("blue", "white", "red"))(200)
# Visualizamos las correlaciones mediante un mapa de calor
corrplot(correlaciones, method = "color", col = colores, addCoef.col = "black")
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
message = FALSE,
eval = TRUE,
fig.width = 6,
fig.height = 4,
fig.align = "center",
class.source = "badCode")
options(width = 90)
library(readxl)
library(dplyr)
library(ggplot2)
library(ggthemes)
library(hrbrthemes)
library(plotly)
library(tidyr)
library(tidyverse)
library(scales)
library(corrplot)
# Borramos ambiente de trabajo
rm(list = ls())
# Seteamos directorio de trabajo
setwd("/Users/ppando/Materias/data/materias/estadistica/tp_grupal")
# Cargamos datos del archivo
datos <- read_xlsx("seguros.xlsx")
# Verificamos cantidad de casos
nrow(datos) > 0
# Mostramos los primeros 6 casos
head(datos)
# Mostramos estructura de los datos
str(datos)
# cuali = {Genero, Fuma, Region}
# cuanti = {Edad, IMC, ingreso, premio}
# Contamos número de nulos por variables (columnas)
sapply(datos, function(x) sum(is.na(x)))
# Eliminamos casos (filas) con nulos
datos <- datos[!is.na(datos$Fuma),]
# Otra forma: datos <- na.omit(datos)
par(mfrow = c(2, 2))
ggplot(datos, aes(Edad)) + geom_boxplot()
ggplot(datos, aes(IMC)) + geom_boxplot()
ggplot(datos, aes(ingreso)) + geom_boxplot()
ggplot(datos, aes(premio)) + geom_boxplot()
# Detectamos datos muy atípicos en Edad
Q1 <- quantile(datos$Edad, 0.25)
Q3 <- quantile(datos$Edad, 0.75)
RI <-  Q3 - Q1
lim_izq <- Q1 - 3*RI
lim_der <- Q3 + 3*RI
atipicos <- datos %>% filter(Edad < lim_izq | Edad > lim_der)
# No hay
# Detectamos datos muy atípicos en IMC
Q1 <- quantile(datos$IMC, 0.25)
Q3 <- quantile(datos$IMC, 0.75)
RI <-  Q3 - Q1
lim_izq <- Q1 - 3*RI
lim_der <- Q3 + 3*RI
atipicos <- datos %>% filter(IMC < lim_izq | IMC > lim_der)
# No hay
# Detectamos datos muy atípicos en ingreso
Q1 <- quantile(datos$ingreso, 0.25)
Q3 <- quantile(datos$ingreso, 0.75)
RI <-  Q3 - Q1
lim_izq <- Q1 - 3*RI
lim_der <- Q3 + 3*RI
atipicos <- datos %>% filter(ingreso < lim_izq | ingreso > lim_der)
# No hay
# Detectamos datos muy atípicos en premio
Q1 <- quantile(datos$premio, 0.25)
Q3 <- quantile(datos$premio, 0.75)
RI <-  Q3 - Q1
lim_izq <- Q1 - 3*RI
lim_der <- Q3 + 3*RI
atipicos <- datos %>% filter(premio < lim_izq | premio > lim_der)
atipicos
# Lo eliminamos
datos <- datos %>% filter(premio != max(premio))
# Declaramos a las variables cualitativas como factor, para poder reconocer categorias
datos$Genero <- as.factor(datos$Genero)
datos$Fuma <- as.factor(datos$Fuma)
datos$Region <- as.factor(datos$Region)
# Mostramos medidas resumen
summary(datos)
# Calculamos la matriz de correlación que nos muestra los coeficientes de correlación entre cada para de variables.
datos_numericos <- datos %>% select(Edad, IMC, ingreso, premio)
correlaciones <- cor(datos_numericos)
correlaciones
# Si alguna correlación está cercana a 1 o -1, significa que hay una relación fuerte (positiva
# Valores cercanos a
# 1: Correlación positiva fuerte. A medida que una variable aumenta, la otra también tiende a aumentar.
# -1: Correlación negativa fuerte. Si una variable sube, la otra tiende a bajar.
# 0: Correlación débil o nula. No hay una relación clara entre las variables.
# Definimos una paleta de colores
colores <- colorRampPalette(c("blue", "white", "red"))(200)
# Visualizamos las correlaciones mediante un mapa de calor
corrplot(correlaciones, method = "color", col = colores, addCoef.col = "black")
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
message = FALSE,
eval = TRUE,
fig.width = 6,
fig.height = 4,
fig.align = "center",
class.source = "badCode")
options(width = 90)
library(dplyr)
library(ggplot2)
library(ggthemes)
library(hrbrthemes)
library(plotly)
library(tidyr)
library(tidyverse)
library(scales)
library(mice)
# Borro ambiente de trabajo
rm(list = ls())
# Seteo directorio de trabajo
setwd("/Users/ppando/Materias/data/materias/exploracion-visualizacion/tp")
# Cargo datos del archivo
datos <- read.csv("googleplaystore.csv", sep = ",")
# Verifico cantidad de casos
nrow(datos) > 0
# Muestro los primeros 6 casos
head(datos)
# Identifico filas duplicadas
duplicados <- duplicated(datos)
# Verifico existencia de filas duplicadas
sum(duplicados) > 0
# Identifico cuales son los duplicados
filter(datos, duplicados)
# Nuevo data frame con datos únicos
datos <- distinct(datos)
# Verifico sin duplicados
sum(duplicated(datos)) == 0
# Detecto valores atípicos de Rating mediante técnica de diagrama de caja
ggplot(datos, aes(Rating)) + geom_boxplot()
# Filtro el caso con rating 19, atípico con datos NA
datos <- datos %>% filter(Rating != 19)
# Valido datos sin caso con rating 19
nrow(datos %>% filter(Rating == 19)) == 0
# Convierto variable Reviews a numérico
datos$Reviews = as.numeric(datos$Reviews)
# Detecto valores atípicos de Reviews mediante técnica de diagrama de caja
ggplot(datos, aes(Reviews)) + geom_boxplot()
# Saco posfijo "M" y convierto a numérico
datos$Size = ifelse(grepl("M", datos$Size), round(as.numeric(sub("M", "", datos$Size)), 2), datos$Size)
# Saco posfijo "k", convierto a numérico y ajusto valor a Megabyte
datos$Size = ifelse(grepl("k", datos$Size), round(as.numeric(sub("k", "", datos$Size)) / 1024, 2), datos$Size)
# Pongo 0 en lugar de "Varies with device"
datos$Size = as.numeric(sub("Varies with device", "0", datos$Size))
# Detecto valores atípicos de Size mediante técnica de diagrama de caja
ggplot(datos, aes(Size)) + geom_boxplot()
# Saco el sufijo '+' en todas las observaciones de la variable Installs
datos$Installs = sub("[+]", "", datos$Installs)
# Saco el sufijo ',' en todas las observaciones de la variable Installs y convierto a numérico
datos$Installs = as.numeric(gsub("[,]", "", datos$Installs))
# Detecto valores atípicos de Installs mediante técnica de diagrama de caja
ggplot(datos, aes(Installs)) + geom_boxplot()
# Saco el prefijo '$' en todas las observaciones de la variable Price y convierto a numérico
datos$Price = as.numeric(sub("[$]", "", datos$Price))
# Detecto valores atípicos de Price mediante técnica de diagrama de caja
ggplot(datos, aes(Price)) + geom_boxplot()
# Muestro la estructura de los datos
str(datos)
# Declaro a determinadas variables cualitativas como factor, para poder reconocer categorias
datos$Category <- as.factor(datos$Category)
datos$Type <- as.factor(datos$Type)
datos$Content.Rating <- as.factor(datos$Content.Rating)
datos$Genres <- as.factor(datos$Genres)
# Calculo promedios
datos %>%
group_by(Category) %>%
select(Rating, Reviews, Size, Installs, Price) %>%
summarize(
promedio_rating = mean(Rating, na.rm = TRUE),
promedio_reviews = mean(Reviews, na.rm = TRUE),
promedio_size = mean(Size, na.rm = TRUE),
promedio_installs = mean(Installs, na.rm = TRUE),
promedio_precio = mean(Price, na.rm = TRUE)
)
# Calculo desvios
datos %>%
group_by(Category) %>%
select(Rating, Reviews, Size, Installs, Price) %>%
summarize(
desvio_rating = sd(Rating, na.rm = TRUE),
desvio_reviews = sd(Reviews, na.rm = TRUE),
desvio_size = sd(Size, na.rm = TRUE),
desvio_installs = sd(Installs, na.rm = TRUE),
desvio_precio = sd(Price, na.rm = TRUE)
)
# Calculo medianas
datos %>%
group_by(Category) %>%
select(Rating, Reviews, Size, Installs, Price) %>%
summarize(
mediana_rating = median(Rating, na.rm = TRUE),
mediana_reviews = median(Reviews, na.rm = TRUE),
mediana_size = median(Size, na.rm = TRUE),
mediana_installs = median(Installs, na.rm = TRUE),
mediana_precio = median(Price, na.rm = TRUE)
)
# Calculo quantiles
datos %>%
group_by(Category) %>%
select(Rating, Reviews, Size, Installs, Price) %>%
summarize(
quantiles_rating = quantile(Rating, probs = c(0.25, 0.50, 0.75), na.rm = TRUE),
quantiles_reviews = quantile(Reviews, probs = c(0.25, 0.50, 0.75), na.rm = TRUE),
quantiles_size = quantile(Size, probs = c(0.25, 0.50, 0.75), na.rm = TRUE),
quantiles_installs = quantile(Installs, probs = c(0.25, 0.50, 0.75), na.rm = TRUE),
quantiles_precio = quantile(Price, probs = c(0.25, 0.50, 0.75), na.rm = TRUE)
)
# Declaro e implemento la función: bd -> list
funcion <- function(bd) {
lista_externa <- list()
categorias <- distinct(bd %>% select(Category))
for (cat in categorias$Category) {
df <- bd %>% filter(Content.Rating == 'Teen') %>% filter(Category == cat) %>% select(App, Reviews)
lista_interna <- list(c(cat, min(df$Reviews), max(df$Reviews), mean(df$Reviews)), df)
lista_externa <- append(lista_externa, lista_interna)
}
return (lista_externa)
}
# Invoco a la función y muestro la lista resultado
print(funcion(datos))
# Divido la fecha, extraigo el año de cada caso y creo una variable Year
datos$Year <- sapply(strsplit(datos$Last.Updated, ", "), function(x) x[2])
# Cuento actualizaciones por año y categoría
resumen <- datos %>%
group_by(Year, Category) %>%
summarise(Total_Actualizaciones = n(), .groups = "drop")
ggplot(resumen, aes(x = Year, y = Total_Actualizaciones, fill = Category)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Total de Actualizaciones por Año y Categoría",
x = "Año",
y = "Total de Actualizaciones",
fill = "Categoria") +
theme(plot.title = element_text(size = 10, face = "bold", hjust = 0.5),
legend.position = "bottom",
legend.title = element_text(size = 8, face = "bold"),
legend.text = element_text(size = 5),
axis.text = element_text(size = 8, face = "bold"),
axis.title = element_text(size = 8, face = "bold"))
resumen <- datos %>%
group_by(Category) %>%
summarise(
app_mas_cara = App[which.max(Price)],
precio_mas_caro = max(Price, na.rm = TRUE),
.groups = 'drop')
resumen
ggplot(resumen, aes(x = precio_mas_caro, y = app_mas_cara, fill = Category)) +
geom_col() +
labs(title = "Aplicación más cara por categoría",
y = "Aplicación",
x = "Precio",
fill = "Categoria") +
theme(plot.title = element_text(size = 10, face = "bold", hjust = 0.5),
legend.position = "bottom",
legend.title = element_text(size = 8, face = "bold"),
legend.text = element_text(size = 5),
axis.text = element_text(size = 3),
axis.title = element_text(size = 8, face = "bold"))
ggplot(datos, aes(x = Rating, fill = Type)) +
geom_histogram(alpha = 0.5, position = "identity") +
labs(title = "Distribución del rating entre las aplicaciones pagas y gratuitas",
y = "Cantidad",
x = "Rating",
fill = "Tipo de aplicación")
# Filtro categorias relacionadas con salud y deporte
filtrado <- datos %>% filter(Category %in% c("HEALTH_AND_FITNESS","SPORTS"))
ggplot(filtrado, aes(x = Category, y = Size, fill = Type)) +
geom_boxplot() +
theme_minimal() +
labs(title = "Comparación del tamaño de aplicaciones de salud y deporte",
x = "Categoría",
y = "Tamaño (MB)",
fill = "Tipo de aplicación")
meses <- c("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December")
# Divido la fecha, extraigo el mes de cada caso y creo una variable Month
datos$Month <- sapply(strsplit(datos$Last.Updated, " "), function(x) x[1])
# Asigno a cada mes su número correspondiente y creo una variable NMonth
datos$NMonth <- factor(match(datos$Month, meses), levels = 1:12)
filtrado <- datos %>%
filter(Year == "2018" & Category %in% c("HEALTH_AND_FITNESS","EDUCATION","ENTERTAINMENT")) %>%
group_by(Month, NMonth, Category) %>%
summarise(Total_Actualizaciones = n(), .groups = "drop") %>%
arrange(NMonth)
ggplot(filtrado, aes(x = NMonth, y = Total_Actualizaciones, group = Category, color = Category)) +
geom_line(size = 1) +
geom_point(size = 3) +
theme_minimal() +
labs(title = "Evolución de Actualizaciones por Mes (2018)",
x = "Mes",
y = "Total de Actualizaciones",
color = "Categoría")
filtrado <- datos %>% filter(Category %in% c("FAMILY", "GAME", "HEALTH_AND_FITNESS") & price <= 15)
filtrado <- datos %>% filter(Category %in% c("FAMILY", "GAME", "HEALTH_AND_FITNESS") & Price <= 15)
# Visualizo la dispersión, mediana y posibles valores atípicos de los precios en cada categoría
ggplot(filtrado, aes(x = Category, y = Price, fill = Category)) +
geom_boxplot() +
theme_minimal() +
labs(title = "Comparación de precios por categoría",
x = "Categoría",
y = "Precio",
fill = "Categoría")
filtrado <- datos %>% filter(Category %in% c("FAMILY", "GAME", "HEALTH_AND_FITNESS") & Price <= 15)
# Visualizo la dispersión, mediana y posibles valores atípicos de los precios en cada categoría
ggplot(filtrado, aes(x = Category, y = Price, fill = Category)) +
geom_boxplot() +
theme_minimal() +
labs(title = "Comparación de precios por categoría",
x = "Categoría",
y = "Precio",
fill = "Categoría")
filtrado <- datos %>% filter(Category %in% c("FAMILY", "GAME", "HEALTH_AND_FITNESS") & between(Price, 0.01, 15))
# Visualizo la dispersión, mediana y posibles valores atípicos de los precios en cada categoría
ggplot(filtrado, aes(x = Category, y = Price, fill = Category)) +
geom_boxplot() +
theme_minimal() +
labs(title = "Comparación de precios por categoría",
x = "Categoría",
y = "Precio",
fill = "Categoría")
