datos[c(1,4),c(2,3)]
subset(datos, Sexo=='mujer')
subset(datos, Sexo=='mujer')[1]
datos <- data.frame("Sexo" = c("hombre", "mujer", "hombre", "hombre", "mujer", "mujer", "hombre", "mujer"),
"Presión arterial" = c(119, 99, 102, 78, 78, 82, 96, 104),
"Pulsos por minuto" = c(59, 89, 107, 76, 91, 64, 78, 92))
datos[c(1,4),]
datos[c(1,4),c(2,3)]
subset(datos, Sexo=='mujer')[1]
subset(datos, Sexo=='mujer')[1,]
subset(datos, Sexo=='mujer')[1,2] > subset(datos, Sexo=='mujer')[2,2]
datos[,3]
datos[,3] * 60
datos <- data.frame("Sexo" = c("hombre", "mujer", "hombre", "hombre", "mujer", "mujer", "hombre", "mujer"),
"Presión arterial" = c(119, 99, 102, 78, 78, 82, 96, 104),
"Pulsos por minuto" = c(59, 89, 107, 76, 91, 64, 78, 92))
datos[c(1,4),]
datos[c(1,4),c(2,3)]
subset(datos, Sexo=='mujer')[1,2] > subset(datos, Sexo=='mujer')[2,2]
datos[,3] * 60
datos
hombres_mayor100 <- subset(datos, Sexo=='hombre', "Presión arterial" > 100)
hombres_mayor100
datos <- data.frame("Sexo" = c("hombre", "mujer", "hombre", "hombre", "mujer", "mujer", "hombre", "mujer"),
"Presión_arterial" = c(119, 99, 102, 78, 78, 82, 96, 104),
"Pulsos_por_minuto" = c(59, 89, 107, 76, 91, 64, 78, 92))
datos[c(1,4),]
datos[c(1,4),c(2,3)]
subset(datos, Sexo=='mujer')[1,2] > subset(datos, Sexo=='mujer')[2,2]
datos[,3] * 60
datos
hombres_mayor100 <- subset(datos, Sexo=='hombre', "Presión_arterial" > 100)
hombres_mayor100
datos <- data.frame("Sexo" = c("hombre", "mujer", "hombre", "hombre", "mujer", "mujer", "hombre", "mujer"),
"Presión_arterial" = c(119, 99, 102, 78, 78, 82, 96, 104),
"Pulsos_por_minuto" = c(59, 89, 107, 76, 91, 64, 78, 92))
datos[c(1,4),]
datos[c(1,4),c(2,3)]
subset(datos, Sexo=='mujer')[1,2] > subset(datos, Sexo=='mujer')[2,2]
datos[,3] * 60
datos
hombres_mayor100 <- subset(datos, Sexo=='hombre' & "Presión_arterial" > 100)
hombres_mayor100
datos <- data.frame( Sexo = c("hombre", "mujer", "hombre", "hombre", "mujer", "mujer", "hombre", "mujer"),
Presión_arterial = c(119, 99, 102, 78, 78, 82, 96, 104),
Pulsos_por_minuto = c(59, 89, 107, 76, 91, 64, 78, 92))
datos[c(1,4),]
datos[c(1,4),c(2,3)]
subset(datos, Sexo=='mujer')[1,2] > subset(datos, Sexo=='mujer')[2,2]
datos[,3] * 60
datos
hombres_mayor100 <- subset(datos, Sexo=='hombre' & Presión_arterial > 100)
hombres_mayor100
datos <- data.frame( Sexo = c("hombre", "mujer", "hombre", "hombre", "mujer", "mujer", "hombre", "mujer"),
Presión_arterial = c(119, 99, 102, 78, 78, 82, 96, 104),
Pulsos_por_minuto = c(59, 89, 107, 76, 91, 64, 78, 92))
datos[c(1,4),]
datos[c(1,4),c(2,3)]
subset(datos, Sexo=='mujer')[1,2] > subset(datos, Sexo=='mujer')[2,2]
datos[,3] * 60
datos
hombres_mayor100 <- subset(datos, Sexo=='hombre' & Presión_arterial > 100)
hombres_mayor100
datos
max <- max(subset(datos, Sexo=='mujer')[3])
datos <- data.frame( Sexo = c("hombre", "mujer", "hombre", "hombre", "mujer", "mujer", "hombre", "mujer"),
Presión_arterial = c(119, 99, 102, 78, 78, 82, 96, 104),
Pulsos_por_minuto = c(59, 89, 107, 76, 91, 64, 78, 92))
datos[c(1,4),]
datos[c(1,4),c(2,3)]
subset(datos, Sexo=='mujer')[1,2] > subset(datos, Sexo=='mujer')[2,2]
datos[,3] * 60
datos
hombres_mayor100 <- subset(datos, Sexo=='hombre' & Presión_arterial > 100)
hombres_mayor100
datos
max <- max(subset(datos, Sexo=='mujer')[3])
max
# Crear un dataframe con las siguientes variables
datos <- data.frame( Sexo = c("hombre", "mujer", "hombre", "hombre", "mujer", "mujer", "hombre", "mujer"),
Presión_arterial = c(119, 99, 102, 78, 78, 82, 96, 104),
Pulsos_por_minuto = c(59, 89, 107, 76, 91, 64, 78, 92))
# Visualizar todos los valores para el primer y cuarto individuo
datos[c(1,4),]
# Repetir lo mismo pero solo para las últimas dos variables
datos[c(1,4),c(2,3)]
# Determinar si la primera mujer de la tabla tiene una presión arterial mayor a la de la segunda mujer
subset(datos, Sexo=='mujer')[1,2] > subset(datos, Sexo=='mujer')[2,2]
# Construir una nueva columna que cuente los pulsos pero por hora
datos <- mutate(datos, Pulsos_por_hora = c(datos[,3] * 60))
# Crear un dataframe con las siguientes variables
datos <- data.frame( Sexo = c("hombre", "mujer", "hombre", "hombre", "mujer", "mujer", "hombre", "mujer"),
Presión_arterial = c(119, 99, 102, 78, 78, 82, 96, 104),
Pulsos_por_minuto = c(59, 89, 107, 76, 91, 64, 78, 92))
# Visualizar todos los valores para el primer y cuarto individuo
datos[c(1,4),]
# Repetir lo mismo pero solo para las últimas dos variables
datos[c(1,4),c(2,3)]
# Determinar si la primera mujer de la tabla tiene una presión arterial mayor a la de la segunda mujer
subset(datos, Sexo=='mujer')[1,2] > subset(datos, Sexo=='mujer')[2,2]
# Construir una nueva columna que cuente los pulsos pero por hora
datos <- cbind(datos, Pulsos_por_hora = c(datos[,3] * 60))
datos
for (i in 1 : 5) {
print(i)
}
print(i)
for (i in 1 : 5)
print(i)
x <- 2
if (x == 1) print("a") else print("b")
for (i in 1 : 5) print(i)
x <- 2
if (x == 1) print("a") else print("b")
for (i in 1 : 5) print(i)
c <- 0
while (c < 5) {
print(c)
c <- c + 1
}
suma <- function(x, y) {
return (x + y)
}
print(suma(1, 2))
suma <- function(x, y=2) {
return (x + y)
}
print(suma(1))
suma <- function(x, y=2) {
return (x + y)
}
print(suma(1, 3))
print(suma(1))
hola <- function() {
e <- as.numeric(readline('Edad: '))
print(e+1)
}
hola()
hola <- function() {
e <- as.numeric(readline('Edad: '))
cat('Hola')
print(e+1)
}
hola()
hola <- function() {
e <- as.numeric(readline('Edad: '))
cat('Hola')
print(e+1)
}
hola()
par_impar <- function(numero) {
if (numero %% 2 == 0) print("El número es par") else ("El número es impar")
}
par_impar(2)
par_impar(3)
temperatura <- function() {
temp <- as.numeric(readline('Temperatura: '))
if (temp < 0) return ("Hace frío")
if (temp <= 20) return ("Temperatura templada")
return ("Hace calor")
}
print(temperatura())
temperatura <- function() {
temp <- as.numeric(readline('Temperatura: '))
if (temp < 0) return ("Hace frío")
if (temp <= 20) return ("Temperatura templada")
return ("Hace calor")
}
print(temperatura())
suma_numeros <- function() {
acum <- 0
for (i in 1:10)
acum <- acum + 1
print(acum)
}
suma_numeros()
suma_numeros <- function() {
acum <- 0
for (i in 1:10)
acum <- acum + 1
print(acum)
}
suma_numeros()
suma_numeros <- function() {
acum <- 0
for (i in 1:10)
acum <- acum + i
print(acum)
}
suma_numeros()
suma_numeros <- function() {
acum <- 0
for (i in 1:100)
acum <- acum + i
print(acum)
}
suma_numeros()
par_impar <- function(numero) {
if (numero %% 2 == 0) print("El número es par") else ("El número es impar")
}
par_impar(2)
par_impar(3)
temperatura <- function() {
temp <- readline('Temperatura: ')
if (temp < 0) return ("Hace frío")
if (temp <= 20) return ("Temperatura templada")
return ("Hace calor")
}
print(temperatura())
temperatura <- function() {
temp <- readline('Temperatura: ')
if (temp < 0) return ("Hace frío")
if (temp <= 20) return ("Temperatura templada")
return ("Hace calor")
}
print(temperatura())
temp <- readline('Temperatura: ')
temp <- readline('Temperatura: ')
temperatura <- function() {
temp <- readline('Temperatura: ')
browse()
class(temp)
if (temp < 0) return ("Hace frío")
if (temp <= 20) return ("Temperatura templada")
return ("Hace calor")
}
print(temperatura())
temperatura <- function() {
temp <- readline('Temperatura: ')
browser()
class(temp)
if (temp < 0) return ("Hace frío")
if (temp <= 20) return ("Temperatura templada")
return ("Hace calor")
}
print(temperatura())
temperatura <- function() {
temp <- readline('Temperatura: ')
browser()
str(temp)
if (temp < 0) return ("Hace frío")
if (temp <= 20) return ("Temperatura templada")
return ("Hace calor")
}
print(temperatura())
temperatura <- function() {
temp <- as.numeric(readline('Temperatura: '))
if (temp < 0) return ("Hace frío")
if (temp <= 20) return ("Temperatura templada")
return ("Hace calor")
}
print(temperatura())
pares <- function() {
i <- 1
cont <- 0
while (i <= 50) {
if (i %% 2 == 0) {
cont <- cont + 1
}
i <- i + 1
}
print(cont)
}
pares()
aleatorios <- function() {
repeat {
n <- rbinom(1, 100)
if (n > 90) break
print(n)
}
}
aleatorios()
aleatorios <- function() {
repeat {
n <- rbinom(1, 100, 1)
if (n > 90) break
print(n)
}
}
aleatorios()
aleatorios <- function() {
repeat {
n <- rbinom(1, 100, 1)
if (n > 90) break
print(n)
}
}
aleatorios()
aleatorios <- function() {
repeat {
n <- rbinom(1, 100, 1)
if (n > 90) break
print(n)
}
}
aleatorios()
aleatorios()
# Generación de Números Aleatorios
# Escribir un código que use un bucle repeat para generar números aleatorios
# entre 1 y 100 hasta que se genere un número mayor a 90
# Imprimir todos los números generados
aleatorios <- function() {
repeat {
n <- rbinom(1, 100, 1)
if (n > 90) break
print(n)
}
}
aleatorios()
aleatorios()
n <- rbinom(1, 100, 0.50)
aleatorios <- function() {
repeat {
n <- sample(1:100)
if (n > 90) break else print(n)
}
}
aleatorios()
repeat {
n <- sample(1:100)
if (n > 90) break
print(n)
}
aleatorios <- function() {
repeat {
n <- sample(1:100)
if (n > 90) break
print(n)
}
}
base <- airquality
head(base)
install.packages("VIM")
library(VIM)
aggr(base, numbers=T, sortVar=T)
install.packages("mice")
library(mice)
columnas <- c("Ozone", "Solar.R")
imput_data <- mice(base[,names(base) %in% columnas],m = 1,
maxit = 1, method = "mean", print=F)
complete.data <- complete(imput_data)
imput_data
complete.data <- complete(imput_data)
imput_data
complete.data
par(mfrow = c(1, 2))
hist(na.omit(airquality$Ozone),
breaks = 15,
col = NA,
border = "blue",
ylim = c(0, 40),
xlab = "Ozone (ppb)",
ylab = "Frequency",
main = "")
hist(complete.data$Ozone[which(is.na(airquality$Ozone))],
col = NA,
border = "deeppink",
add = TRUE)
hist(na.omit(airquality$Solar.R),
breaks = 15,
col = NA,
border = "blue",
ylim = c(0, 40),
xlab = "Solar.R",
ylab = "Frequency",
main = "")
hist(complete.data$Solar.R[which(is.na(airquality$Solar.R))],
col = NA,
border = "deeppink",
add = TRUE)
xyplot(imput_data,Ozone ~ Solar.R)
aleatorios()
aleatorios <- function() {
repeat {
n <- sample(1:100, 1, replace=TRUE)
if (n > 90) break
print(n)
}
}
aleatorios()
aleatorios <- function() {
repeat {
n <- sample(1:100, 1, replace=TRUE)
if (n > 90) break
print(n)
}
}
aleatorios()
incr_edad <- function() {
e <- as.numeric(readline('Edad: '))
print(e+1)
}
incr_edad <- function() {
e <- as.numeric(readline('Edad: '))
print(e+1)
}
incr_edad()
# En un famoso casino, la ruleta está formada por 18 números negros, 18 rojos y 2 verdes.
# Un jugador tiene un capital de $100 y apuesta $1 al rojo cada vez que juega.
# Si cuando apuesta al rojo sale rojo, entonces recupera su inversión duplicada.
# Si pierde no recupera nada.
# a) Simular una realización de juego de ruleta y a partir de ella
# calcular el capital del jugador al finalizar un juego.
# b) Crear una función cantidad juegos que dada una cantidad Nrep de simulaciones
# del experimento calcule la cantidad de veces que puede jugar el jugador hasta quedarse sin dinero.
# c) Simular 1000 veces el experimento del ítem b y calcular el promedio de los resultados.
# Simulación de una jugada en la ruleta
jugar_ruleta <- function(capital_inicial = 100) {
apuesta <- 1
resultado <- sample(c(rep("rojo", 18), rep("negro", 18), rep("verde", 2)), 1)
if (resultado == "rojo") {
capital_inicial <- capital_inicial + apuesta # Gana y duplica su inversión
} else {
capital_inicial <- capital_inicial - apuesta # Pierde
}
return(capital_inicial)
}
# Función que calcula cuántas veces puede jugar hasta quedarse sin dinero
cantidad_juegos <- function(n_repeticiones, capital_inicial = 100) {
juegos_por_repeticion <- numeric(n_repeticiones)
for (i in 1:n_repeticiones) {
capital <- capital_inicial
juegos <- 0
while (capital > 0) {
capital <- jugar_ruleta(capital)
juegos <- juegos + 1
}
juegos_por_repeticion[i] <- juegos
}
return(juegos_por_repeticion)
}
# Simulación 1000 veces y cálculo del promedio
n_repeticiones <- 1000
resultados <- cantidad_juegos(n_repeticiones)
promedio_juegos <- mean(resultados)
cat(sprintf("Promedio de juegos antes de quedarse sin dinero tras %d simulaciones: %.2f\n",
n_repeticiones, promedio_juegos))
# a.	Calcular la probabilidad : P(-1 < Z < 1)
p <- pnorm(1, 0, 1) - pnorm(-1, 0, 1)
p
# c.	Calcular la probabilidad : P(-3 < Z < 3)
p <- pnorm(3, 0, 1) - pnorm(-3, 0, 1)
p
library(tinytex)
library(latexpdf)
names(grasas)
grasas<-read.csv("../Datos/Grasas.csv", header=TRUE,sep=";")
grasas<-read.csv("../R/Grasas.csv", header=TRUE,sep=";")
grasas<-read.csv("../aprendizaje-automatico/R/Grasas.csv", header=TRUE,sep=";")
grasas<-read.csv("../materias/aprendizaje-automatico/R/Grasas.csv", header=TRUE,sep=";")
grasas<-read.csv("../Materias/data/materias/aprendizaje-automatico/R/Grasas.csv", header=TRUE,sep=";")
setwd("/Users/ppando/Materias/data/materias/aprendizaje-automatico/R")
grasas<-read.csv("Grasas.csv", header=TRUE,sep=";")
names(grasas)
setwd("/Users/ppando/Materias/data/materias/aprendizaje-automatico/R")
grasas<-read.csv("Grasas.csv", header=TRUE,sep=";")
names(grasas)
head(grasas)
library(ggplot2)
library(GGally)
install.packages("GGally")
library(ggplot2)
library(GGally)
setwd("/Users/ppando/Materias/data/materias/aprendizaje-automatico/R")
grasas<-read.csv("Grasas.csv", header=TRUE,sep=";")
names(grasas)
head(grasas)
library(ggplot2)
library(GGally)
setwd("/Users/ppando/Materias/data/materias/aprendizaje-automatico/R")
grasas<-read.csv("Grasas.csv", header=TRUE,sep=";")
names(grasas)
head(grasas)
pairs(grasas)
library(ggplot2)
library(GGally)
setwd("/Users/ppando/Materias/data/materias/aprendizaje-automatico/R")
grasas<-read.csv("Grasas.csv", header=TRUE,sep=";")
names(grasas)
head(grasas)
pairs(grasas)
modelo <- lm(grasas~edad, data=grasas)
modelo
library(ggplot2)
library(GGally)
setwd("/Users/ppando/Materias/data/materias/aprendizaje-automatico/R")
grasas<-read.csv("Grasas.csv", header=TRUE,sep=";")
names(grasas)
head(grasas)
pairs(grasas)
modelo <- lm(grasas~edad, data=grasas)
modelo
plot(grasas$edad, grasas$grasas)
abline(modelo, col="red")
summary(modelo)
names(modelo)
modelo$coefficients
modelo$coefficients
modelo$residuals
modelo$fitted.values
plot(fit, res)
res <- modelo$residuals
fit <- modelo$fitted.values
plot(fit, res)
abline(0, 0, col="red")
plot(fit, res.standard)
plot(fit, res.standard)
res.standard <- rstandard(modelo)
plot(fit, res.standard)
abline(0, 0, col="red")
qqnorm(res.standard)
qqline(res.standard)
