print(i)
x <- 2
if (x == 1) print("a") else print("b")
for (i in 1 : 5) print(i)
x <- 2
if (x == 1) print("a") else print("b")
for (i in 1 : 5) print(i)
c <- 0
while (c < 5) {
print(c)
c <- c + 1
}
suma <- function(x, y) {
return (x + y)
}
print(suma(1, 2))
suma <- function(x, y=2) {
return (x + y)
}
print(suma(1))
suma <- function(x, y=2) {
return (x + y)
}
print(suma(1, 3))
print(suma(1))
hola <- function() {
e <- as.numeric(readline('Edad: '))
print(e+1)
}
hola()
hola <- function() {
e <- as.numeric(readline('Edad: '))
cat('Hola')
print(e+1)
}
hola()
hola <- function() {
e <- as.numeric(readline('Edad: '))
cat('Hola')
print(e+1)
}
hola()
par_impar <- function(numero) {
if (numero %% 2 == 0) print("El número es par") else ("El número es impar")
}
par_impar(2)
par_impar(3)
temperatura <- function() {
temp <- as.numeric(readline('Temperatura: '))
if (temp < 0) return ("Hace frío")
if (temp <= 20) return ("Temperatura templada")
return ("Hace calor")
}
print(temperatura())
temperatura <- function() {
temp <- as.numeric(readline('Temperatura: '))
if (temp < 0) return ("Hace frío")
if (temp <= 20) return ("Temperatura templada")
return ("Hace calor")
}
print(temperatura())
suma_numeros <- function() {
acum <- 0
for (i in 1:10)
acum <- acum + 1
print(acum)
}
suma_numeros()
suma_numeros <- function() {
acum <- 0
for (i in 1:10)
acum <- acum + 1
print(acum)
}
suma_numeros()
suma_numeros <- function() {
acum <- 0
for (i in 1:10)
acum <- acum + i
print(acum)
}
suma_numeros()
suma_numeros <- function() {
acum <- 0
for (i in 1:100)
acum <- acum + i
print(acum)
}
suma_numeros()
par_impar <- function(numero) {
if (numero %% 2 == 0) print("El número es par") else ("El número es impar")
}
par_impar(2)
par_impar(3)
temperatura <- function() {
temp <- readline('Temperatura: ')
if (temp < 0) return ("Hace frío")
if (temp <= 20) return ("Temperatura templada")
return ("Hace calor")
}
print(temperatura())
temperatura <- function() {
temp <- readline('Temperatura: ')
if (temp < 0) return ("Hace frío")
if (temp <= 20) return ("Temperatura templada")
return ("Hace calor")
}
print(temperatura())
temp <- readline('Temperatura: ')
temp <- readline('Temperatura: ')
temperatura <- function() {
temp <- readline('Temperatura: ')
browse()
class(temp)
if (temp < 0) return ("Hace frío")
if (temp <= 20) return ("Temperatura templada")
return ("Hace calor")
}
print(temperatura())
temperatura <- function() {
temp <- readline('Temperatura: ')
browser()
class(temp)
if (temp < 0) return ("Hace frío")
if (temp <= 20) return ("Temperatura templada")
return ("Hace calor")
}
print(temperatura())
temperatura <- function() {
temp <- readline('Temperatura: ')
browser()
str(temp)
if (temp < 0) return ("Hace frío")
if (temp <= 20) return ("Temperatura templada")
return ("Hace calor")
}
print(temperatura())
temperatura <- function() {
temp <- as.numeric(readline('Temperatura: '))
if (temp < 0) return ("Hace frío")
if (temp <= 20) return ("Temperatura templada")
return ("Hace calor")
}
print(temperatura())
pares <- function() {
i <- 1
cont <- 0
while (i <= 50) {
if (i %% 2 == 0) {
cont <- cont + 1
}
i <- i + 1
}
print(cont)
}
pares()
aleatorios <- function() {
repeat {
n <- rbinom(1, 100)
if (n > 90) break
print(n)
}
}
aleatorios()
aleatorios <- function() {
repeat {
n <- rbinom(1, 100, 1)
if (n > 90) break
print(n)
}
}
aleatorios()
aleatorios <- function() {
repeat {
n <- rbinom(1, 100, 1)
if (n > 90) break
print(n)
}
}
aleatorios()
aleatorios <- function() {
repeat {
n <- rbinom(1, 100, 1)
if (n > 90) break
print(n)
}
}
aleatorios()
aleatorios()
# Generación de Números Aleatorios
# Escribir un código que use un bucle repeat para generar números aleatorios
# entre 1 y 100 hasta que se genere un número mayor a 90
# Imprimir todos los números generados
aleatorios <- function() {
repeat {
n <- rbinom(1, 100, 1)
if (n > 90) break
print(n)
}
}
aleatorios()
aleatorios()
n <- rbinom(1, 100, 0.50)
aleatorios <- function() {
repeat {
n <- sample(1:100)
if (n > 90) break else print(n)
}
}
aleatorios()
repeat {
n <- sample(1:100)
if (n > 90) break
print(n)
}
aleatorios <- function() {
repeat {
n <- sample(1:100)
if (n > 90) break
print(n)
}
}
base <- airquality
head(base)
install.packages("VIM")
library(VIM)
aggr(base, numbers=T, sortVar=T)
install.packages("mice")
library(mice)
columnas <- c("Ozone", "Solar.R")
imput_data <- mice(base[,names(base) %in% columnas],m = 1,
maxit = 1, method = "mean", print=F)
complete.data <- complete(imput_data)
imput_data
complete.data <- complete(imput_data)
imput_data
complete.data
par(mfrow = c(1, 2))
hist(na.omit(airquality$Ozone),
breaks = 15,
col = NA,
border = "blue",
ylim = c(0, 40),
xlab = "Ozone (ppb)",
ylab = "Frequency",
main = "")
hist(complete.data$Ozone[which(is.na(airquality$Ozone))],
col = NA,
border = "deeppink",
add = TRUE)
hist(na.omit(airquality$Solar.R),
breaks = 15,
col = NA,
border = "blue",
ylim = c(0, 40),
xlab = "Solar.R",
ylab = "Frequency",
main = "")
hist(complete.data$Solar.R[which(is.na(airquality$Solar.R))],
col = NA,
border = "deeppink",
add = TRUE)
xyplot(imput_data,Ozone ~ Solar.R)
aleatorios()
aleatorios <- function() {
repeat {
n <- sample(1:100, 1, replace=TRUE)
if (n > 90) break
print(n)
}
}
aleatorios()
aleatorios <- function() {
repeat {
n <- sample(1:100, 1, replace=TRUE)
if (n > 90) break
print(n)
}
}
aleatorios()
incr_edad <- function() {
e <- as.numeric(readline('Edad: '))
print(e+1)
}
incr_edad <- function() {
e <- as.numeric(readline('Edad: '))
print(e+1)
}
incr_edad()
# En un famoso casino, la ruleta está formada por 18 números negros, 18 rojos y 2 verdes.
# Un jugador tiene un capital de $100 y apuesta $1 al rojo cada vez que juega.
# Si cuando apuesta al rojo sale rojo, entonces recupera su inversión duplicada.
# Si pierde no recupera nada.
# a) Simular una realización de juego de ruleta y a partir de ella
# calcular el capital del jugador al finalizar un juego.
# b) Crear una función cantidad juegos que dada una cantidad Nrep de simulaciones
# del experimento calcule la cantidad de veces que puede jugar el jugador hasta quedarse sin dinero.
# c) Simular 1000 veces el experimento del ítem b y calcular el promedio de los resultados.
# Simulación de una jugada en la ruleta
jugar_ruleta <- function(capital_inicial = 100) {
apuesta <- 1
resultado <- sample(c(rep("rojo", 18), rep("negro", 18), rep("verde", 2)), 1)
if (resultado == "rojo") {
capital_inicial <- capital_inicial + apuesta # Gana y duplica su inversión
} else {
capital_inicial <- capital_inicial - apuesta # Pierde
}
return(capital_inicial)
}
# Función que calcula cuántas veces puede jugar hasta quedarse sin dinero
cantidad_juegos <- function(n_repeticiones, capital_inicial = 100) {
juegos_por_repeticion <- numeric(n_repeticiones)
for (i in 1:n_repeticiones) {
capital <- capital_inicial
juegos <- 0
while (capital > 0) {
capital <- jugar_ruleta(capital)
juegos <- juegos + 1
}
juegos_por_repeticion[i] <- juegos
}
return(juegos_por_repeticion)
}
# Simulación 1000 veces y cálculo del promedio
n_repeticiones <- 1000
resultados <- cantidad_juegos(n_repeticiones)
promedio_juegos <- mean(resultados)
cat(sprintf("Promedio de juegos antes de quedarse sin dinero tras %d simulaciones: %.2f\n",
n_repeticiones, promedio_juegos))
# a.	Calcular la probabilidad : P(-1 < Z < 1)
p <- pnorm(1, 0, 1) - pnorm(-1, 0, 1)
p
# c.	Calcular la probabilidad : P(-3 < Z < 3)
p <- pnorm(3, 0, 1) - pnorm(-3, 0, 1)
p
## Clase 1
### Borro ambiente de trabajo
rm(list=ls())
### Seteo directorio de trabajo
setwd("/Users/ppando/Materias/data/materias/estadistica/R")
### Cargo librerias a usar
library(readr)
### Cargo datos del archivo abalone.txt
datos <- read.table("abalone.txt", header =  F, sep = ",")
### Muestro las primeras 6 filas
head(datos)
### Pongo nombre a las columnas
colnames(datos) <- c("Genero", "Long", "Diam", "Altura", "Peso", "Peso1", "Peso2", "Peso3", "N.anillos")
head(datos)
### Muestro estructura de los datos
str(datos)
## Clase 1
### Borro ambiente de trabajo
rm(list=ls())
### Seteo directorio de trabajo
setwd("/Users/ppando/Materias/data/materias/estadistica/R")
### Cargo librerias a usar
library(readr)
### Cargo datos del archivo abalone.txt
datos <- read.table("abalone.txt", header =  F, sep = ",")
### Muestro las primeras 6 filas
head(datos)
str(datos)
## Clase 1
### Borro ambiente de trabajo
rm(list=ls())
### Seteo directorio de trabajo
setwd("/Users/ppando/Materias/data/materias/estadistica/R")
### Cargo librerias a usar
library(readr)
### Cargo datos del archivo abalone.txt
datos <- read.table("abalone.txt", header =  F, sep = ",")
### Muestro las primeras 6 filas
head(datos)
### Pongo nombre a las columnas
colnames(datos) <- c("Genero", "Long", "Diam", "Altura", "Peso", "Peso1", "Peso2", "Peso3", "N.anillos")
head(datos)
### Muestro estructura de los datos
str(datos)
# cuantitativas:
# cualitativas: genero
### Convierto a los datos genero como factor
# variables cualitativas declararlas como factor (se reconocen categorias)
datos$Genero <- as.factor(datos$Genero)
### Muestro resumen
summary(datos)
datos <- c(100, 200, 200, 250, 600)
mean(datos)
datos <- c(100, 200, 200, 250, 600)
mean(datos)
median(datos)
datos <- c(100, 200, 200, 250, 600)
mean(datos)
median(datos)
as.numeric(names(which.max(table(datos))))
var(datos)
sd(datos)
rango <- max(datos) - min(datos)
rango
range(datos)
max(datos) - min(datos)
coef(datos)
sd(datos) / mean(datos)
quantile(datos, 1)
summary(datos)
quantile(datos, 0.25)
quantile(datos, 0.50)
quantile(datos, 0.75)
summary(datos)
min(datos)
quantile(datos, 0.25)
quantile(datos, 0.50)
quantile(datos, 0.75)
max(datos)
quantile(datos, probs = c(0.25, 0.50, 0.75))
table(datos)
prop.table(datos)
1/5
2/5
hist(datos)
prop.table(frecG)
hist(datos, breaks=1)
hist(datos, breaks=100)
hist(datos, breaks=100, col = "lightblue")
barplot(datos)
pie(datos)
pie(datos, legend = rownames(datos))
pie(datos, legend = rownames(datos))
hist(datos, breaks=100, col = "lightblue")
pie(datos, legend = rownames(datos))
pie(datos, labels = names(datos))
pie(datos, labels = names(datos))
pie(datos)
barplot(datos)
boxplot(datos)
RI <- quantile(datos, 0.75) -quantile(datos, 0.25)
RI
RI <- quantile(datos, 0.75) -quantile(datos, 0.25)
RI * 1.5
## Clase 1
### Borro ambiente de trabajo
rm(list=ls())
### Seteo directorio de trabajo
setwd("/Users/ppando/Materias/data/materias/estadistica/R")
### Cargo librerias a usar
library(readr)
### Cargo datos del archivo abalone.txt
datos <- read.table("abalone.txt", header =  F, sep = ",")
### Muestro las primeras 6 filas
head(datos)
### Pongo nombre a las columnas
colnames(datos) <- c("Genero", "Long", "Diam", "Altura", "Peso", "Peso1", "Peso2", "Peso3", "N.anillos")
head(datos)
### Muestro estructura de los datos
str(datos)
# cuantitativas:
# cualitativas: genero
### Convierto a los datos genero como factor
# variables cualitativas declararlas como factor (se reconocen categorias)
datos$Genero <- as.factor(datos$Genero)
### Muestro resumen
summary(datos)
### Muestro gráfico de barras para Género
attach(datos) # es como with
frecG <- table(Genero)
barplot(frecG,
main = "Gráfico de barras para Género",
xlab = "Género",
ylab = "Frecuencias",
col = c("pink", "green", "blue"),
legend = rownames(frecG))
### Muestro gráfico de torta o sectores
pie (frecG,
col = hcl.colors(length(frecG), "Fall"))
### Muestro frecuencias relativas
prop.table(frecG)
### Muestro histograma y datos del histograma
histo <- hist(Long,
breaks = 12,
main = "Histograma de Longitud",
col = "lightblue",
border = "purple")
histo
### Muestro boxplot
boxplot(Long,
las = 1,
col = "darkorchid1",
ylab = "longitud")
library(dplyr)
datos_num <- select_if(datos[,-1], is.numeric)
summary(datos_num)
par(mfrow = c(2, 2))
boxplot(Long,
col = "darkorchid1",
xlab = "Longitud")
boxplot(Diam,
col = "darkorchid1",
xlab = "Diámetro")
boxplot(Altura,
col = "darkorchid1",
xlab = "Altura")
boxplot(Peso,
col = "darkorchid1",
xlab = "Peso")
## Gráficos bivariados
## Visualizando numerica vs categórica
boxplot(Long ~ Genero, col = c("blue", "green", "red"))
table(datos)
datos <- c(100, 200, 200, 250, 600)
table(datos)
prop.table(table(datos))
2/5
