# Mostramos los primeros 6 casos
head(datos)
# Mostramos estructura de los datos
str(datos)
# Contamos número de nulos por variables (columnas)
sapply(datos, function(x) sum(is.na(x)))
# Eliminamos casos (filas) con nulos
datos <- datos[!is.na(datos$Fuma),]
# Verificamos que el caso con nulos fue eliminado
sapply(datos, function(x) sum(is.na(x)))
seguros_long_Genero <- datos %>%
select(Edad, Genero, IMC, ingreso, premio) %>%
pivot_longer(cols = -Genero, names_to = "variable", values_to = "valor")
ggplotly(
ggplot(seguros_long_Genero, aes(x = Genero, y = valor, fill = Genero)) +
geom_boxplot(alpha = 0.7) +
facet_wrap(~ variable, scales = "free_y") +  # Un panel por variable
theme_bw() +
theme(legend.position = "none") +
labs(
title = "Distribución de variables por Genero",
x = "Género",
y = "Valor"
)
)
seguros_long_Fuma <- datos %>%
select(Edad, IMC, Fuma, ingreso, premio) %>%
pivot_longer(cols = -Fuma, names_to = "variable", values_to = "valor")
ggplotly(
ggplot(seguros_long_Fuma, aes(x = Fuma, y = valor, fill = Fuma)) +
geom_boxplot(alpha = 0.7) +
facet_wrap(~ variable, scales = "free_y") +  # Un panel por variable
theme_bw() +
theme(legend.position = "none") +
labs(
title = "Distribución de variables por Condición de Fumador",
x = "Fuma",
y = "Valor"
)
)
seguros_long_Region <- datos %>%
select(Edad, IMC, Region, ingreso, premio) %>%
pivot_longer(cols = -Region, names_to = "variable", values_to = "valor")
ggplotly(
ggplot(seguros_long_Region, aes(x = Region, y = valor, fill = Region)) +
geom_boxplot(alpha = 0.7) +
facet_wrap(~ variable, scales = "free_y") +  # Un panel por variable
theme_bw() +
theme(legend.position = "none") +
labs(
title = "Distribución de variables por Region",
x = "Región",
y = "Valor"
)
)
gplot = datos %>% filter(Genero == "femenino") %>%
ggplot(mapping = aes(x=Region, y=premio, color=Fuma)) +
geom_point() +
stat_summary(fun ="mean", geom="crossbar", color="red", linewidth=0.5) + # mostramos la media
theme_bw() + xlab("Region") + ylab("Premio")
ggplotly(gplot)
# Lo eliminamos
datos <- datos %>% filter(premio != max(premio))
# Declaramos a las variables cualitativas como factor, para poder reconocer categorias
datos$Genero <- as.factor(datos$Genero)
datos$Fuma <- as.factor(datos$Fuma)
datos$Region <- as.factor(datos$Region)
# Mostramos medidas resumen
summary(datos)
# Volvemos a mostrar graficamente las medidas resumen de las variables cuantis agrupadas por las variables cualis
seguros_long_Genero <- datos %>%
select(Edad, Genero, IMC, ingreso, premio) %>%
pivot_longer(cols = -Genero, names_to = "variable", values_to = "valor")
ggplotly(
ggplot(seguros_long_Genero, aes(x = Genero, y = valor, fill = Genero)) +
geom_boxplot(alpha = 0.7) +
facet_wrap(~ variable, scales = "free_y") +  # Un panel por variable
theme_bw() +
theme(legend.position = "none") +
labs(
title = "Distribución de variables por Genero",
x = "Género",
y = "Valor"
)
)
seguros_long_Fuma <- datos %>%
select(Edad, IMC, Fuma, ingreso, premio) %>%
pivot_longer(cols = -Fuma, names_to = "variable", values_to = "valor")
ggplotly(
ggplot(seguros_long_Fuma, aes(x = Fuma, y = valor, fill = Fuma)) +
geom_boxplot(alpha = 0.7) +
facet_wrap(~ variable, scales = "free_y") +  # Un panel por variable
theme_bw() +
theme(legend.position = "none") +
labs(
title = "Distribución de variables por Condición de Fumador",
x = "Fuma",
y = "Valor"
)
)
seguros_long_Region <- datos %>%
select(Edad, IMC, Region, ingreso, premio) %>%
pivot_longer(cols = -Region, names_to = "variable", values_to = "valor")
ggplotly(
ggplot(seguros_long_Region, aes(x = Region, y = valor, fill = Region)) +
geom_boxplot(alpha = 0.7) +
facet_wrap(~ variable, scales = "free_y") +  # Un panel por variable
theme_bw() +
theme(legend.position = "none") +
labs(
title = "Distribución de variables por Region",
x = "Región",
y = "Valor"
)
)
# Calculamos la matriz de correlación que nos muestra los coeficientes de correlación entre cada para de variables.
datos_numericos <- datos %>% select(Edad, IMC, ingreso, premio)
correlaciones <- cor(datos_numericos)
correlaciones
# Definimos una paleta de colores
colores <- colorRampPalette(c("blue", "white", "red"))(200)
# Visualizamos las correlaciones mediante un mapa de calor
corrplot(correlaciones, method = "color", col = colores, addCoef.col = "black")
# Visualizamos en un gráfico de dispersión la dependencia entre ingreso y premio
gplot = datos %>%
ggplot(mapping = aes(x=ingreso, y=premio, color=Genero)) +
geom_point() +
geom_smooth(formula= 'y ~ x', method = "lm", se = FALSE, color = "red") +
theme_bw() + xlab("Ingreso") + ylab("Premio") + ggtitle("Relación entre ingreso y premio")
ggplotly(gplot)
# Visualizamos en un gráfico de dispersión la dependencia entre Edad e IMC
gplot = datos %>%
ggplot(mapping = aes(x=Edad, y=IMC, color=Genero)) +
geom_point() +
geom_smooth(formula= 'y ~ x', method = "lm", se = FALSE, color = "red") +
theme_bw() + xlab("Edad") + ylab("IMC") + ggtitle("Relación entre Edad e IMC")
ggplotly(gplot)
# Verificamos mediante un QQPlot
gplot <- datos %>%
ggplot(aes(sample = IMC, color = Fuma)) +
geom_qq() + geom_qq_line() +
facet_wrap(~ Fuma) +
ggtitle("QQ-plot de IMC por estado de fumador") +
theme_bw()
ggplotly(gplot)
by(data = datos, INDICES = datos$Fuma, FUN = function(x) { lillie.test(x$IMC) })
bartlett.test(IMC ~ Fuma, data=datos)
leveneTest(IMC ~ Fuma, data=datos) # Se usa cuando no se puede asegurar la normalidad
t.test(IMC ~ Fuma, alternative = "two.sided", mu = 0, var.equal = TRUE, data=datos) # p-value = 0.2055
# Verificamos mediante un QQPlot
gplot <- datos %>%
ggplot(aes(sample = ingreso, color = Genero)) +
geom_qq() + geom_qq_line() +
facet_wrap(~ Genero) +
ggtitle("QQ-plot de ingreso por Género") +
theme_bw()
ggplotly(gplot)
by(data = datos, INDICES = datos$Genero, FUN = function(x) { lillie.test(x$ingreso) })
bartlett.test(ingreso ~ Genero, data=datos)
leveneTest(ingreso ~ Genero, data=datos) # Se usa cuando no se puede asegurar la normalidad
oneway.test(ingreso ~ Genero, data=datos)
t.test(ingreso ~ Genero, alternative = "two.sided", mu = 0, var.equal = FALSE, data=datos)
t.test(ingreso ~ Genero, alternative = "greater", mu = 0, var.equal = FALSE, data=datos)
# Verificamos mediante un QQPlot
gplot <- datos %>%
ggplot(aes(sample = IMC, color = Region)) +
geom_qq() + geom_qq_line() +
facet_wrap(~ Region) +
ggtitle("QQ-plot de IMC por Región") +
theme_bw()
ggplotly(gplot)
by(data = datos, INDICES = datos$Region, FUN = function(x) { lillie.test(x$IMC) })
bartlett.test(IMC ~ Region, data=datos)
leveneTest(IMC ~ Region, data=datos) # Se usa cuando no se puede asegurar la normalidad
oneway.test(IMC ~ Region, data=datos)
comparar_dos_regiones = function(ds, nombre_variable){
regiones_unicas = ds %>% distinct(Region)
lst = as.list(as.data.frame(t(regiones_unicas)))
pvalores_ds = data.frame(variables = character(), p_valor=character())
formula_str <- reformulate("Region", nombre_variable)
while(length(lst)>1){
region_A = as.character(lst[1])
lst = lst[-1]
for(region_B in lst){
region_B = as.character(region_B)
working_ds = ds %>% filter(Region %in% c(region_A, region_B))
rdo = t.test(formula_str, alternative = "two.sided", mu = 0, var.equal = FALSE, data=working_ds)
label = paste0(region_A,"-",region_B)
pvalores_ds = pvalores_ds %>% union(data.frame(variables=label, p_valor=as.character(rdo[["p.value"]])))
}
}
return(pvalores_ds)
}
dt = comparar_dos_regiones(datos, "IMC")
kable(dt, caption="<center><b>Resultado Test t de Student (p-valor) - IMC cada 2 Regiones</b></center>")
oneway.test(IMC ~ Region, data=datos)
kruskal.test(IMC ~ Region, data = datos)
# Verificamos mediante un QQPlot
gplot <- datos %>%
ggplot(aes(sample = ingreso, color = Region)) +
geom_qq() + geom_qq_line() +
facet_wrap(~ Region) +
ggtitle("QQ-plot de ingreso por Región") +
theme_bw()
ggplotly(gplot)
by(data = datos, INDICES = datos$Region, FUN = function(x) { lillie.test(x$ingreso) })
bartlett.test(ingreso ~ Region, data=datos)
leveneTest(ingreso ~ Region, data=datos) # Se usa cuando no se puede asegurar la normalidad
oneway.test(ingreso ~ Region, data=datos)
kruskal.test(ingreso ~ Region, data = datos)
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
message = FALSE,
eval = TRUE,
fig.width = 6,
fig.height = 4,
fig.align = "center",
class.source = "badCode")
options(width = 90)
library(readxl)
library(dplyr)
library(ggplot2)
library(ggthemes)
library(hrbrthemes)
library(plotly)
library(tidyr)
library(tidyverse)
library(scales)
library(corrplot)
library(car)
library(nortest)
library(tseries)
library(knitr)
# Borramos ambiente de trabajo
rm(list = ls())
# Seteamos directorio de trabajo
setwd("/Users/ppando/Materias/data/materias/estadistica/tp_grupal")
# Cargamos datos del archivo
datos <- read_xlsx("seguros.xlsx")
# Mostramos los primeros 6 casos
head(datos)
# Mostramos estructura de los datos
str(datos)
# Contamos número de nulos por variables (columnas)
sapply(datos, function(x) sum(is.na(x)))
# Eliminamos casos (filas) con nulos
datos <- datos[!is.na(datos$Fuma),]
# Verificamos que el caso con nulos fue eliminado
sapply(datos, function(x) sum(is.na(x)))
seguros_long_Genero <- datos %>%
select(Edad, Genero, IMC, ingreso, premio) %>%
pivot_longer(cols = -Genero, names_to = "variable", values_to = "valor")
ggplotly(
ggplot(seguros_long_Genero, aes(x = Genero, y = valor, fill = Genero)) +
geom_boxplot(alpha = 0.7) +
facet_wrap(~ variable, scales = "free_y") +  # Un panel por variable
theme_bw() +
theme(legend.position = "none") +
labs(
title = "Distribución de variables por Genero",
x = "Género",
y = "Valor"
)
)
seguros_long_Fuma <- datos %>%
select(Edad, IMC, Fuma, ingreso, premio) %>%
pivot_longer(cols = -Fuma, names_to = "variable", values_to = "valor")
ggplotly(
ggplot(seguros_long_Fuma, aes(x = Fuma, y = valor, fill = Fuma)) +
geom_boxplot(alpha = 0.7) +
facet_wrap(~ variable, scales = "free_y") +  # Un panel por variable
theme_bw() +
theme(legend.position = "none") +
labs(
title = "Distribución de variables por Condición de Fumador",
x = "Fuma",
y = "Valor"
)
)
seguros_long_Region <- datos %>%
select(Edad, IMC, Region, ingreso, premio) %>%
pivot_longer(cols = -Region, names_to = "variable", values_to = "valor")
ggplotly(
ggplot(seguros_long_Region, aes(x = Region, y = valor, fill = Region)) +
geom_boxplot(alpha = 0.7) +
facet_wrap(~ variable, scales = "free_y") +  # Un panel por variable
theme_bw() +
theme(legend.position = "none") +
labs(
title = "Distribución de variables por Region",
x = "Región",
y = "Valor"
)
)
gplot = datos %>% filter(Genero == "femenino") %>%
ggplot(mapping = aes(x=Region, y=premio, color=Fuma)) +
geom_point() +
stat_summary(fun ="mean", geom="crossbar", color="red", linewidth=0.5) + # mostramos la media
theme_bw() + xlab("Region") + ylab("Premio")
ggplotly(gplot)
# Lo eliminamos
datos <- datos %>% filter(premio != max(premio))
# Declaramos a las variables cualitativas como factor, para poder reconocer categorias
datos$Genero <- as.factor(datos$Genero)
datos$Fuma <- as.factor(datos$Fuma)
datos$Region <- as.factor(datos$Region)
# Mostramos medidas resumen
summary(datos)
# Volvemos a mostrar graficamente las medidas resumen de las variables cuantis agrupadas por las variables cualis
seguros_long_Genero <- datos %>%
select(Edad, Genero, IMC, ingreso, premio) %>%
pivot_longer(cols = -Genero, names_to = "variable", values_to = "valor")
ggplotly(
ggplot(seguros_long_Genero, aes(x = Genero, y = valor, fill = Genero)) +
geom_boxplot(alpha = 0.7) +
facet_wrap(~ variable, scales = "free_y") +  # Un panel por variable
theme_bw() +
theme(legend.position = "none") +
labs(
title = "Distribución de variables por Genero",
x = "Género",
y = "Valor"
)
)
seguros_long_Fuma <- datos %>%
select(Edad, IMC, Fuma, ingreso, premio) %>%
pivot_longer(cols = -Fuma, names_to = "variable", values_to = "valor")
ggplotly(
ggplot(seguros_long_Fuma, aes(x = Fuma, y = valor, fill = Fuma)) +
geom_boxplot(alpha = 0.7) +
facet_wrap(~ variable, scales = "free_y") +  # Un panel por variable
theme_bw() +
theme(legend.position = "none") +
labs(
title = "Distribución de variables por Condición de Fumador",
x = "Fuma",
y = "Valor"
)
)
seguros_long_Region <- datos %>%
select(Edad, IMC, Region, ingreso, premio) %>%
pivot_longer(cols = -Region, names_to = "variable", values_to = "valor")
ggplotly(
ggplot(seguros_long_Region, aes(x = Region, y = valor, fill = Region)) +
geom_boxplot(alpha = 0.7) +
facet_wrap(~ variable, scales = "free_y") +  # Un panel por variable
theme_bw() +
theme(legend.position = "none") +
labs(
title = "Distribución de variables por Region",
x = "Región",
y = "Valor"
)
)
# Calculamos la matriz de correlación que nos muestra los coeficientes de correlación entre cada para de variables.
datos_numericos <- datos %>% select(Edad, IMC, ingreso, premio)
correlaciones <- cor(datos_numericos)
correlaciones
# Definimos una paleta de colores
colores <- colorRampPalette(c("blue", "white", "red"))(200)
# Visualizamos las correlaciones mediante un mapa de calor
corrplot(correlaciones, method = "color", col = colores, addCoef.col = "black")
# Visualizamos en un gráfico de dispersión la dependencia entre ingreso y premio
gplot = datos %>%
ggplot(mapping = aes(x=ingreso, y=premio, color=Genero)) +
geom_point() +
geom_smooth(formula= 'y ~ x', method = "lm", se = FALSE, color = "red") +
theme_bw() + xlab("Ingreso") + ylab("Premio") + ggtitle("Relación entre ingreso y premio")
ggplotly(gplot)
# Visualizamos en un gráfico de dispersión la dependencia entre Edad e IMC
gplot = datos %>%
ggplot(mapping = aes(x=Edad, y=IMC, color=Genero)) +
geom_point() +
geom_smooth(formula= 'y ~ x', method = "lm", se = FALSE, color = "red") +
theme_bw() + xlab("Edad") + ylab("IMC") + ggtitle("Relación entre Edad e IMC")
ggplotly(gplot)
# Verificamos mediante un QQPlot
gplot <- datos %>%
ggplot(aes(sample = IMC, color = Fuma)) +
geom_qq() + geom_qq_line() +
facet_wrap(~ Fuma) +
ggtitle("QQ-plot de IMC por estado de fumador") +
theme_bw()
ggplotly(gplot)
by(data = datos, INDICES = datos$Fuma, FUN = function(x) { lillie.test(x$IMC) })
bartlett.test(IMC ~ Fuma, data=datos)
leveneTest(IMC ~ Fuma, data=datos) # Se usa cuando no se puede asegurar la normalidad
t.test(IMC ~ Fuma, alternative = "two.sided", mu = 0, var.equal = TRUE, data=datos) # p-value = 0.2055
# Verificamos mediante un QQPlot
gplot <- datos %>%
ggplot(aes(sample = ingreso, color = Genero)) +
geom_qq() + geom_qq_line() +
facet_wrap(~ Genero) +
ggtitle("QQ-plot de ingreso por Género") +
theme_bw()
ggplotly(gplot)
by(data = datos, INDICES = datos$Genero, FUN = function(x) { lillie.test(x$ingreso) })
bartlett.test(ingreso ~ Genero, data=datos)
leveneTest(ingreso ~ Genero, data=datos) # Se usa cuando no se puede asegurar la normalidad
oneway.test(ingreso ~ Genero, data=datos)
t.test(ingreso ~ Genero, alternative = "two.sided", mu = 0, var.equal = FALSE, data=datos)
t.test(ingreso ~ Genero, alternative = "greater", mu = 0, var.equal = FALSE, data=datos)
# Verificamos mediante un QQPlot
gplot <- datos %>%
ggplot(aes(sample = IMC, color = Region)) +
geom_qq() + geom_qq_line() +
facet_wrap(~ Region) +
ggtitle("QQ-plot de IMC por Región") +
theme_bw()
ggplotly(gplot)
by(data = datos, INDICES = datos$Region, FUN = function(x) { lillie.test(x$IMC) })
bartlett.test(IMC ~ Region, data=datos)
leveneTest(IMC ~ Region, data=datos) # Se usa cuando no se puede asegurar la normalidad
oneway.test(IMC ~ Region, data=datos)
kruskal.test(IMC ~ Region, data = datos)
comparar_dos_regiones = function(ds, nombre_variable){
regiones_unicas = ds %>% distinct(Region)
lst = as.list(as.data.frame(t(regiones_unicas)))
pvalores_ds = data.frame(variables = character(), p_valor=character())
formula_str <- reformulate("Region", nombre_variable)
while(length(lst)>1){
region_A = as.character(lst[1])
lst = lst[-1]
for(region_B in lst){
region_B = as.character(region_B)
working_ds = ds %>% filter(Region %in% c(region_A, region_B))
rdo = t.test(formula_str, alternative = "two.sided", mu = 0, var.equal = FALSE, data=working_ds)
label = paste0(region_A,"-",region_B)
pvalores_ds = pvalores_ds %>% union(data.frame(variables=label, p_valor=as.character(rdo[["p.value"]])))
}
}
return(pvalores_ds)
}
dt = comparar_dos_regiones(datos, "IMC")
kable(dt, caption="<center><b>Resultado Test t de Student (p-valor) - IMC cada 2 Regiones</b></center>")
# Verificamos mediante un QQPlot
gplot <- datos %>%
ggplot(aes(sample = ingreso, color = Region)) +
geom_qq() + geom_qq_line() +
facet_wrap(~ Region) +
ggtitle("QQ-plot de ingreso por Región") +
theme_bw()
ggplotly(gplot)
by(data = datos, INDICES = datos$Region, FUN = function(x) { lillie.test(x$ingreso) })
bartlett.test(ingreso ~ Region, data=datos)
leveneTest(ingreso ~ Region, data=datos) # Se usa cuando no se puede asegurar la normalidad
oneway.test(ingreso ~ Region, data=datos)
kruskal.test(ingreso ~ Region, data = datos)
dt = comparar_dos_regiones(datos, "ingreso")
kable(dt, caption="<center><b>Resultado Test t de Student (p-valor) - ingreso cada 2 Regiones</b></center>")
# Verificamos mediante un QQPlot
gplot <- datos %>%
ggplot(aes(sample = premio, color = Region)) +
geom_qq() + geom_qq_line() +
facet_wrap(~ Region) +
ggtitle("QQ-plot de Premio por Región") +
theme_bw()
ggplotly(gplot)
by(data = datos, INDICES = datos$Region, FUN = function(x) { lillie.test(x$premio) })
bartlett.test(premio ~ Region, data=datos)
leveneTest(premio ~ Region, data=datos) # Se usa cuando no se puede asegurar la normalidad
anova_result <- aov(premio ~ Region, data = datos)
summary(anova_result)
anova_result <- aov(premio ~ Region, data = datos)
summary(anova_result)
oneway.test(premio ~ Region, data=dataset, var.equal = TRUE) # p-value = 0.905
anova_result <- aov(premio ~ Region, data = datos)
summary(anova_result)
oneway.test(premio ~ Region, data=datos, var.equal = TRUE) # p-value = 0.905
dt = comparar_dos_regiones(datos, "premio")
kable(dt, caption="<center><b>Resultado Test t de Student (p-valor) - Premio cada 2 Regiones</b></center>")
intervalos = TukeyHSD(anova_result)
plot(intervalos)
intervalos = TukeyHSD(anova_result)
plot(intervalos)
pairwise.t.test(x = dataset$premio, g = dataset$Region, p.adjust.method = "bonferroni",
pool.sd = TRUE, paired = FALSE, alternative = "two.sided")
intervalos = TukeyHSD(anova_result)
plot(intervalos)
pairwise.t.test(x = datos$premio, g = datos$Region, p.adjust.method = "bonferroni",
pool.sd = TRUE, paired = FALSE, alternative = "two.sided")
frecuencias = table(datos$Region, datos$Fuma)
margin.table(frecuencias, 1)
margin.table(frecuencias, 2)
frecuencias = table(datos$Region, datos$Fuma)
margin.table(frecuencias, 1)
margin.table(frecuencias, 2)
prop.table(frecuencias)
chisq.test(frecuencias, correct = F)
install.packages("vcd")
library(readxl)
library(dplyr)
library(ggplot2)
library(ggthemes)
library(hrbrthemes)
library(plotly)
library(tidyr)
library(tidyverse)
library(scales)
library(corrplot)
library(car)
library(nortest)
library(tseries)
library(knitr)
library(vcd)
assocstats(frecuencias)
### Pearson:          p-valor: 0.24913 #es la prueba de chi-cuadrado
### Phi-Coefficient   : NA    #para tablas 2x2
### Contingency Coeff.: 0.078  #toma valores entre 0 y 1 (o menos), o sea este es muy bajo!
### Cramer's V        : 0.079
library(tinytex)
install.packages("latexpdf")
