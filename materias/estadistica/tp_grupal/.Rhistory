print(i)
}
print(i)
for (i in 1 : 5)
print(i)
x <- 2
if (x == 1) print("a") else print("b")
for (i in 1 : 5) print(i)
x <- 2
if (x == 1) print("a") else print("b")
for (i in 1 : 5) print(i)
c <- 0
while (c < 5) {
print(c)
c <- c + 1
}
suma <- function(x, y) {
return (x + y)
}
print(suma(1, 2))
suma <- function(x, y=2) {
return (x + y)
}
print(suma(1))
suma <- function(x, y=2) {
return (x + y)
}
print(suma(1, 3))
print(suma(1))
hola <- function() {
e <- as.numeric(readline('Edad: '))
print(e+1)
}
hola()
hola <- function() {
e <- as.numeric(readline('Edad: '))
cat('Hola')
print(e+1)
}
hola()
hola <- function() {
e <- as.numeric(readline('Edad: '))
cat('Hola')
print(e+1)
}
hola()
par_impar <- function(numero) {
if (numero %% 2 == 0) print("El número es par") else ("El número es impar")
}
par_impar(2)
par_impar(3)
temperatura <- function() {
temp <- as.numeric(readline('Temperatura: '))
if (temp < 0) return ("Hace frío")
if (temp <= 20) return ("Temperatura templada")
return ("Hace calor")
}
print(temperatura())
temperatura <- function() {
temp <- as.numeric(readline('Temperatura: '))
if (temp < 0) return ("Hace frío")
if (temp <= 20) return ("Temperatura templada")
return ("Hace calor")
}
print(temperatura())
suma_numeros <- function() {
acum <- 0
for (i in 1:10)
acum <- acum + 1
print(acum)
}
suma_numeros()
suma_numeros <- function() {
acum <- 0
for (i in 1:10)
acum <- acum + 1
print(acum)
}
suma_numeros()
suma_numeros <- function() {
acum <- 0
for (i in 1:10)
acum <- acum + i
print(acum)
}
suma_numeros()
suma_numeros <- function() {
acum <- 0
for (i in 1:100)
acum <- acum + i
print(acum)
}
suma_numeros()
par_impar <- function(numero) {
if (numero %% 2 == 0) print("El número es par") else ("El número es impar")
}
par_impar(2)
par_impar(3)
temperatura <- function() {
temp <- readline('Temperatura: ')
if (temp < 0) return ("Hace frío")
if (temp <= 20) return ("Temperatura templada")
return ("Hace calor")
}
print(temperatura())
temperatura <- function() {
temp <- readline('Temperatura: ')
if (temp < 0) return ("Hace frío")
if (temp <= 20) return ("Temperatura templada")
return ("Hace calor")
}
print(temperatura())
temp <- readline('Temperatura: ')
temp <- readline('Temperatura: ')
temperatura <- function() {
temp <- readline('Temperatura: ')
browse()
class(temp)
if (temp < 0) return ("Hace frío")
if (temp <= 20) return ("Temperatura templada")
return ("Hace calor")
}
print(temperatura())
temperatura <- function() {
temp <- readline('Temperatura: ')
browser()
class(temp)
if (temp < 0) return ("Hace frío")
if (temp <= 20) return ("Temperatura templada")
return ("Hace calor")
}
print(temperatura())
temperatura <- function() {
temp <- readline('Temperatura: ')
browser()
str(temp)
if (temp < 0) return ("Hace frío")
if (temp <= 20) return ("Temperatura templada")
return ("Hace calor")
}
print(temperatura())
temperatura <- function() {
temp <- as.numeric(readline('Temperatura: '))
if (temp < 0) return ("Hace frío")
if (temp <= 20) return ("Temperatura templada")
return ("Hace calor")
}
print(temperatura())
pares <- function() {
i <- 1
cont <- 0
while (i <= 50) {
if (i %% 2 == 0) {
cont <- cont + 1
}
i <- i + 1
}
print(cont)
}
pares()
aleatorios <- function() {
repeat {
n <- rbinom(1, 100)
if (n > 90) break
print(n)
}
}
aleatorios()
aleatorios <- function() {
repeat {
n <- rbinom(1, 100, 1)
if (n > 90) break
print(n)
}
}
aleatorios()
aleatorios <- function() {
repeat {
n <- rbinom(1, 100, 1)
if (n > 90) break
print(n)
}
}
aleatorios()
aleatorios <- function() {
repeat {
n <- rbinom(1, 100, 1)
if (n > 90) break
print(n)
}
}
aleatorios()
aleatorios()
# Generación de Números Aleatorios
# Escribir un código que use un bucle repeat para generar números aleatorios
# entre 1 y 100 hasta que se genere un número mayor a 90
# Imprimir todos los números generados
aleatorios <- function() {
repeat {
n <- rbinom(1, 100, 1)
if (n > 90) break
print(n)
}
}
aleatorios()
aleatorios()
n <- rbinom(1, 100, 0.50)
aleatorios <- function() {
repeat {
n <- sample(1:100)
if (n > 90) break else print(n)
}
}
aleatorios()
repeat {
n <- sample(1:100)
if (n > 90) break
print(n)
}
aleatorios <- function() {
repeat {
n <- sample(1:100)
if (n > 90) break
print(n)
}
}
base <- airquality
head(base)
install.packages("VIM")
library(VIM)
aggr(base, numbers=T, sortVar=T)
install.packages("mice")
library(mice)
columnas <- c("Ozone", "Solar.R")
imput_data <- mice(base[,names(base) %in% columnas],m = 1,
maxit = 1, method = "mean", print=F)
complete.data <- complete(imput_data)
imput_data
complete.data <- complete(imput_data)
imput_data
complete.data
par(mfrow = c(1, 2))
hist(na.omit(airquality$Ozone),
breaks = 15,
col = NA,
border = "blue",
ylim = c(0, 40),
xlab = "Ozone (ppb)",
ylab = "Frequency",
main = "")
hist(complete.data$Ozone[which(is.na(airquality$Ozone))],
col = NA,
border = "deeppink",
add = TRUE)
hist(na.omit(airquality$Solar.R),
breaks = 15,
col = NA,
border = "blue",
ylim = c(0, 40),
xlab = "Solar.R",
ylab = "Frequency",
main = "")
hist(complete.data$Solar.R[which(is.na(airquality$Solar.R))],
col = NA,
border = "deeppink",
add = TRUE)
xyplot(imput_data,Ozone ~ Solar.R)
aleatorios()
aleatorios <- function() {
repeat {
n <- sample(1:100, 1, replace=TRUE)
if (n > 90) break
print(n)
}
}
aleatorios()
aleatorios <- function() {
repeat {
n <- sample(1:100, 1, replace=TRUE)
if (n > 90) break
print(n)
}
}
aleatorios()
incr_edad <- function() {
e <- as.numeric(readline('Edad: '))
print(e+1)
}
incr_edad <- function() {
e <- as.numeric(readline('Edad: '))
print(e+1)
}
incr_edad()
# En un famoso casino, la ruleta está formada por 18 números negros, 18 rojos y 2 verdes.
# Un jugador tiene un capital de $100 y apuesta $1 al rojo cada vez que juega.
# Si cuando apuesta al rojo sale rojo, entonces recupera su inversión duplicada.
# Si pierde no recupera nada.
# a) Simular una realización de juego de ruleta y a partir de ella
# calcular el capital del jugador al finalizar un juego.
# b) Crear una función cantidad juegos que dada una cantidad Nrep de simulaciones
# del experimento calcule la cantidad de veces que puede jugar el jugador hasta quedarse sin dinero.
# c) Simular 1000 veces el experimento del ítem b y calcular el promedio de los resultados.
# Simulación de una jugada en la ruleta
jugar_ruleta <- function(capital_inicial = 100) {
apuesta <- 1
resultado <- sample(c(rep("rojo", 18), rep("negro", 18), rep("verde", 2)), 1)
if (resultado == "rojo") {
capital_inicial <- capital_inicial + apuesta # Gana y duplica su inversión
} else {
capital_inicial <- capital_inicial - apuesta # Pierde
}
return(capital_inicial)
}
# Función que calcula cuántas veces puede jugar hasta quedarse sin dinero
cantidad_juegos <- function(n_repeticiones, capital_inicial = 100) {
juegos_por_repeticion <- numeric(n_repeticiones)
for (i in 1:n_repeticiones) {
capital <- capital_inicial
juegos <- 0
while (capital > 0) {
capital <- jugar_ruleta(capital)
juegos <- juegos + 1
}
juegos_por_repeticion[i] <- juegos
}
return(juegos_por_repeticion)
}
# Simulación 1000 veces y cálculo del promedio
n_repeticiones <- 1000
resultados <- cantidad_juegos(n_repeticiones)
promedio_juegos <- mean(resultados)
cat(sprintf("Promedio de juegos antes de quedarse sin dinero tras %d simulaciones: %.2f\n",
n_repeticiones, promedio_juegos))
# a.	Calcular la probabilidad : P(-1 < Z < 1)
p <- pnorm(1, 0, 1) - pnorm(-1, 0, 1)
p
# c.	Calcular la probabilidad : P(-3 < Z < 3)
p <- pnorm(3, 0, 1) - pnorm(-3, 0, 1)
p
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
message = FALSE,
eval = TRUE,
fig.width = 6,
fig.height = 4,
fig.align = "center",
class.source = "badCode")
options(width = 90)
library(readxl)
library(dplyr)
library(ggplot2)
library(ggthemes)
library(hrbrthemes)
library(plotly)
library(tidyr)
library(tidyverse)
library(scales)
library(corrplot)
library(car)
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
message = FALSE,
eval = TRUE,
fig.width = 6,
fig.height = 4,
fig.align = "center",
class.source = "badCode")
options(width = 90)
library(readxl)
library(dplyr)
library(ggplot2)
library(ggthemes)
library(hrbrthemes)
library(plotly)
library(tidyr)
library(tidyverse)
library(scales)
library(corrplot)
library(car)
# Borramos ambiente de trabajo
rm(list = ls())
# Seteamos directorio de trabajo
setwd("/Users/ppando/Materias/data/materias/estadistica/tp_grupal")
# Cargamos datos del archivo
datos <- read_xlsx("seguros.xlsx")
# Verificamos cantidad de casos
nrow(datos) > 0
# Mostramos los primeros 6 casos
head(datos)
# Mostramos estructura de los datos
str(datos)
# cuali = {Genero, Fuma, Region}
# cuanti = {Edad, IMC, ingreso, premio}
# Contamos número de nulos por variables (columnas)
sapply(datos, function(x) sum(is.na(x)))
# Eliminamos casos (filas) con nulos
datos <- datos[!is.na(datos$Fuma),]
# Otra forma: datos <- na.omit(datos)
par(mfrow = c(2, 2))
ggplot(datos, aes(Edad)) + geom_boxplot()
ggplot(datos, aes(IMC)) + geom_boxplot()
ggplot(datos, aes(ingreso)) + geom_boxplot()
ggplot(datos, aes(premio)) + geom_boxplot()
# Detectamos datos muy atípicos en Edad
Q1 <- quantile(datos$Edad, 0.25)
Q3 <- quantile(datos$Edad, 0.75)
RI <-  Q3 - Q1
lim_izq <- Q1 - 3*RI
lim_der <- Q3 + 3*RI
atipicos <- datos %>% filter(Edad < lim_izq | Edad > lim_der)
# No hay
# Detectamos datos muy atípicos en IMC
Q1 <- quantile(datos$IMC, 0.25)
Q3 <- quantile(datos$IMC, 0.75)
RI <-  Q3 - Q1
lim_izq <- Q1 - 3*RI
lim_der <- Q3 + 3*RI
atipicos <- datos %>% filter(IMC < lim_izq | IMC > lim_der)
# No hay
# Detectamos datos muy atípicos en ingreso
Q1 <- quantile(datos$ingreso, 0.25)
Q3 <- quantile(datos$ingreso, 0.75)
RI <-  Q3 - Q1
lim_izq <- Q1 - 3*RI
lim_der <- Q3 + 3*RI
atipicos <- datos %>% filter(ingreso < lim_izq | ingreso > lim_der)
# No hay
# Detectamos datos muy atípicos en premio
Q1 <- quantile(datos$premio, 0.25)
Q3 <- quantile(datos$premio, 0.75)
RI <-  Q3 - Q1
lim_izq <- Q1 - 3*RI
lim_der <- Q3 + 3*RI
atipicos <- datos %>% filter(premio < lim_izq | premio > lim_der)
atipicos
# Lo eliminamos
datos <- datos %>% filter(premio != max(premio))
# Declaramos a las variables cualitativas como factor, para poder reconocer categorias
datos$Genero <- as.factor(datos$Genero)
datos$Fuma <- as.factor(datos$Fuma)
datos$Region <- as.factor(datos$Region)
# Mostramos medidas resumen
summary(datos)
# Calculamos la matriz de correlación que nos muestra los coeficientes de correlación entre cada para de variables.
datos_numericos <- datos %>% select(Edad, IMC, ingreso, premio)
correlaciones <- cor(datos_numericos)
correlaciones
# Si alguna correlación está cercana a 1 o -1, significa que hay una relación fuerte (positiva
# Valores cercanos a
# 1: Correlación positiva fuerte. A medida que una variable aumenta, la otra también tiende a aumentar.
# -1: Correlación negativa fuerte. Si una variable sube, la otra tiende a bajar.
# 0: Correlación débil o nula. No hay una relación clara entre las variables.
# Definimos una paleta de colores
colores <- colorRampPalette(c("blue", "white", "red"))(200)
# Visualizamos las correlaciones mediante un mapa de calor
corrplot(correlaciones, method = "color", col = colores, addCoef.col = "black")
# Verificar normalidad
shapiro.test(datos$IMC)
# Verificar homogeneidad de varianza
leveneTest(IMC ~ Fuma, data = datos)
# Como cumple normalidad y homogeneidad
t.test(IMC ~ Fuma, data = datos, var.equal = TRUE)
# Verificar normalidad
shapiro.test(datos$IMC)
# Verificar homogeneidad de varianza
leveneTest(IMC ~ Fuma, data = datos)
# Como cumple normalidad y homogeneidad
t.test(IMC ~ Fuma, data = datos, var.equal = TRUE)
library(readxl)
library(dplyr)
library(ggplot2)
library(ggthemes)
library(hrbrthemes)
library(plotly)
library(tidyr)
library(tidyverse)
library(scales)
library(corrplot)
library(car)
library(nortest)
library(tseries)
install.packages("nortest")
install.packages("tseries")
library(readxl)
library(dplyr)
library(ggplot2)
library(ggthemes)
library(hrbrthemes)
library(plotly)
library(tidyr)
library(tidyverse)
library(scales)
library(corrplot)
library(car)
library(nortest)
library(tseries)
# Verificar normalidad
# H0: IMC sigue una distribución Normal
# H1: IMC NO sigue una distribución Normal
shapiro.test(datos$IMC) # para n < 50; p-valor = 0.002144 (hay evidencia de rechazar H0)
lillie.test(datos$IMC)
# Verificar homogeneidad de varianza
leveneTest(IMC ~ Fuma, data = datos)
# Como cumple normalidad y homogeneidad
t.test(IMC ~ Fuma, data = datos, var.equal = TRUE)
# Verificar normalidad
# H0: IMC sigue una distribución Normal
# H1: IMC NO sigue una distribución Normal
shapiro.test(datos$IMC) # para n < 50; p-valor = 0.002144 (hay evidencia de rechazar H0)
lillie.test(datos$IMC) # p-valor = 0.1305 (NO hay evidencia para rechazar H0, es decir, no hay evidencia para decir que IMC no es normal)
# Como cumple normalidad
t.test(IMC ~ Fuma, data = datos, var.equal = TRUE)
